// Code generated by pigeon; DO NOT EDIT.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "file",
			pos:  position{line: 9, col: 1, offset: 74},
			expr: &actionExpr{
				pos: position{line: 10, col: 3, offset: 85},
				run: (*parser).callonfile1,
				expr: &seqExpr{
					pos: position{line: 10, col: 3, offset: 85},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 10, col: 3, offset: 85},
							label: "_s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 10, col: 6, offset: 88},
								expr: &ruleRefExpr{
									pos:  position{line: 10, col: 6, offset: 88},
									name: "line",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 10, col: 12, offset: 94},
							name: "eof",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eol",
			pos:  position{line: 14, col: 1, offset: 152},
			expr: &choiceExpr{
				pos: position{line: 14, col: 7, offset: 158},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 14, col: 8, offset: 159},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 14, col: 8, offset: 159},
								expr: &litMatcher{
									pos:        position{line: 14, col: 8, offset: 159},
									val:        "\r",
									ignoreCase: false,
									want:       "\"\\r\"",
								},
							},
							&litMatcher{
								pos:        position{line: 14, col: 14, offset: 165},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 14, col: 22, offset: 173},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eoa",
			pos:  position{line: 16, col: 1, offset: 182},
			expr: &choiceExpr{
				pos: position{line: 16, col: 7, offset: 188},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 16, col: 7, offset: 188},
						name: "eol",
					},
					&ruleRefExpr{
						pos:  position{line: 16, col: 13, offset: 194},
						name: "eof",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "empty_line",
			pos:  position{line: 18, col: 1, offset: 201},
			expr: &actionExpr{
				pos: position{line: 19, col: 5, offset: 218},
				run: (*parser).callonempty_line1,
				expr: &choiceExpr{
					pos: position{line: 19, col: 6, offset: 219},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 19, col: 6, offset: 219},
							name: "eol",
						},
						&seqExpr{
							pos: position{line: 19, col: 12, offset: 225},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 19, col: 12, offset: 225},
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 12, offset: 225},
										name: "ws",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 16, offset: 229},
									name: "eoa",
								},
							},
						},
						&seqExpr{
							pos: position{line: 19, col: 22, offset: 235},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 19, col: 22, offset: 235},
									expr: &ruleRefExpr{
										pos:  position{line: 19, col: 22, offset: 235},
										name: "ws",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 26, offset: 239},
									name: "comment",
								},
								&ruleRefExpr{
									pos:  position{line: 19, col: 34, offset: 247},
									name: "eoa",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "line",
			pos:  position{line: 21, col: 1, offset: 287},
			expr: &choiceExpr{
				pos: position{line: 21, col: 8, offset: 294},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 21, col: 8, offset: 294},
						name: "template",
					},
					&actionExpr{
						pos: position{line: 21, col: 20, offset: 306},
						run: (*parser).callonline3,
						expr: &seqExpr{
							pos: position{line: 21, col: 20, offset: 306},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 21, col: 20, offset: 306},
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 20, offset: 306},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 21, col: 24, offset: 310},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 27, offset: 313},
										name: "code",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 21, col: 32, offset: 318},
									expr: &ruleRefExpr{
										pos:  position{line: 21, col: 32, offset: 318},
										name: "comment",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 21, col: 41, offset: 327},
									name: "eoa",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 21, col: 67, offset: 353},
						name: "empty_line",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "comment",
			pos:  position{line: 23, col: 1, offset: 367},
			expr: &actionExpr{
				pos: position{line: 23, col: 11, offset: 377},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 23, col: 11, offset: 377},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 23, col: 11, offset: 377},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 23, col: 15, offset: 381},
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 15, offset: 381},
								name: "ws",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 23, col: 19, offset: 385},
							expr: &seqExpr{
								pos: position{line: 23, col: 20, offset: 386},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 23, col: 20, offset: 386},
										name: "any",
									},
									&notExpr{
										pos: position{line: 23, col: 24, offset: 390},
										expr: &ruleRefExpr{
											pos:  position{line: 23, col: 25, offset: 391},
											name: "eoa",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 23, col: 31, offset: 397},
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 31, offset: 397},
								name: "any",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "code",
			pos:  position{line: 24, col: 1, offset: 434},
			expr: &choiceExpr{
				pos: position{line: 24, col: 8, offset: 441},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 24, col: 8, offset: 441},
						name: "operator",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 19, offset: 452},
						name: "directive",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 31, offset: 464},
						name: "call",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "directive",
			pos:  position{line: 26, col: 1, offset: 473},
			expr: &actionExpr{
				pos: position{line: 26, col: 13, offset: 485},
				run: (*parser).callondirective1,
				expr: &seqExpr{
					pos: position{line: 26, col: 13, offset: 485},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 26, col: 13, offset: 485},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 489},
							label: "directive",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 28, offset: 500},
								name: "include",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "include",
			pos:  position{line: 27, col: 1, offset: 536},
			expr: &actionExpr{
				pos: position{line: 27, col: 11, offset: 546},
				run: (*parser).calloninclude1,
				expr: &seqExpr{
					pos: position{line: 27, col: 11, offset: 546},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 27, col: 11, offset: 546},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 27, col: 21, offset: 556},
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 21, offset: 556},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 27, col: 25, offset: 560},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 28, offset: 563},
								name: "literal",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quotedString",
			pos:  position{line: 29, col: 1, offset: 623},
			expr: &choiceExpr{
				pos: position{line: 29, col: 16, offset: 638},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 29, col: 16, offset: 638},
						name: "singleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 29, col: 37, offset: 659},
						name: "doubleQuotedString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "singleQuotedString",
			pos:  position{line: 30, col: 1, offset: 679},
			expr: &actionExpr{
				pos: position{line: 30, col: 22, offset: 700},
				run: (*parser).callonsingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 30, col: 22, offset: 700},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 30, col: 22, offset: 700},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 30, col: 26, offset: 704},
							expr: &choiceExpr{
								pos: position{line: 30, col: 27, offset: 705},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 30, col: 27, offset: 705},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
									&charClassMatcher{
										pos:        position{line: 30, col: 35, offset: 713},
										val:        "[^']",
										chars:      []rune{'\''},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 30, col: 42, offset: 720},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "doubleQuotedString",
			pos:  position{line: 31, col: 1, offset: 796},
			expr: &actionExpr{
				pos: position{line: 31, col: 22, offset: 817},
				run: (*parser).callondoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 31, col: 22, offset: 817},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 31, col: 22, offset: 817},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 31, col: 26, offset: 821},
							expr: &choiceExpr{
								pos: position{line: 31, col: 27, offset: 822},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 31, col: 27, offset: 822},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
									&charClassMatcher{
										pos:        position{line: 31, col: 36, offset: 831},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 31, col: 43, offset: 838},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression_list",
			pos:  position{line: 33, col: 1, offset: 916},
			expr: &actionExpr{
				pos: position{line: 33, col: 19, offset: 934},
				run: (*parser).callonexpression_list1,
				expr: &seqExpr{
					pos: position{line: 33, col: 19, offset: 934},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 33, col: 19, offset: 934},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 22, offset: 937},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 33, offset: 948},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 36, offset: 951},
								expr: &actionExpr{
									pos: position{line: 33, col: 37, offset: 952},
									run: (*parser).callonexpression_list7,
									expr: &seqExpr{
										pos: position{line: 33, col: 37, offset: 952},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 33, col: 37, offset: 952},
												expr: &ruleRefExpr{
													pos:  position{line: 33, col: 37, offset: 952},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 33, col: 41, offset: 956},
												label: "_e",
												expr: &ruleRefExpr{
													pos:  position{line: 33, col: 44, offset: 959},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "call",
			pos:  position{line: 37, col: 1, offset: 1061},
			expr: &actionExpr{
				pos: position{line: 37, col: 8, offset: 1068},
				run: (*parser).calloncall1,
				expr: &seqExpr{
					pos: position{line: 37, col: 8, offset: 1068},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 37, col: 8, offset: 1068},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 11, offset: 1071},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 17, offset: 1077},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 17, offset: 1077},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 37, col: 21, offset: 1081},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 25, offset: 1085},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 25, offset: 1085},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 37, col: 29, offset: 1089},
							label: "_m",
							expr: &zeroOrOneExpr{
								pos: position{line: 37, col: 32, offset: 1092},
								expr: &ruleRefExpr{
									pos:  position{line: 37, col: 32, offset: 1092},
									name: "expression_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 37, col: 49, offset: 1109},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 49, offset: 1109},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 37, col: 53, offset: 1113},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "index",
			pos:  position{line: 51, col: 1, offset: 1317},
			expr: &actionExpr{
				pos: position{line: 51, col: 9, offset: 1325},
				run: (*parser).callonindex1,
				expr: &seqExpr{
					pos: position{line: 51, col: 9, offset: 1325},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 51, col: 9, offset: 1325},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 51, col: 13, offset: 1329},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 16, offset: 1332},
								name: "expression",
							},
						},
						&litMatcher{
							pos:        position{line: 51, col: 27, offset: 1343},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "member",
			pos:  position{line: 53, col: 1, offset: 1370},
			expr: &actionExpr{
				pos: position{line: 53, col: 10, offset: 1379},
				run: (*parser).callonmember1,
				expr: &labeledExpr{
					pos:   position{line: 53, col: 10, offset: 1379},
					label: "_m",
					expr: &choiceExpr{
						pos: position{line: 53, col: 14, offset: 1383},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 53, col: 14, offset: 1383},
								name: "identifier",
							},
							&actionExpr{
								pos: position{line: 53, col: 27, offset: 1396},
								run: (*parser).callonmember5,
								expr: &labeledExpr{
									pos:   position{line: 53, col: 27, offset: 1396},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 53, col: 29, offset: 1398},
										name: "quotedString",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "reference",
			pos:  position{line: 58, col: 1, offset: 1508},
			expr: &actionExpr{
				pos: position{line: 58, col: 13, offset: 1520},
				run: (*parser).callonreference1,
				expr: &seqExpr{
					pos: position{line: 58, col: 13, offset: 1520},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 58, col: 13, offset: 1520},
							name: "sign",
						},
						&labeledExpr{
							pos:   position{line: 59, col: 3, offset: 1529},
							label: "_m",
							expr: &choiceExpr{
								pos: position{line: 60, col: 5, offset: 1540},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 60, col: 5, offset: 1540},
										name: "store",
									},
									&actionExpr{
										pos: position{line: 61, col: 6, offset: 1555},
										run: (*parser).callonreference7,
										expr: &seqExpr{
											pos: position{line: 61, col: 6, offset: 1555},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 61, col: 6, offset: 1555},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&labeledExpr{
													pos:   position{line: 61, col: 10, offset: 1559},
													label: "_m",
													expr: &ruleRefExpr{
														pos:  position{line: 61, col: 13, offset: 1562},
														name: "store",
													},
												},
												&litMatcher{
													pos:        position{line: 61, col: 19, offset: 1568},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pointer",
			pos:  position{line: 66, col: 1, offset: 1669},
			expr: &actionExpr{
				pos: position{line: 66, col: 11, offset: 1679},
				run: (*parser).callonpointer1,
				expr: &seqExpr{
					pos: position{line: 66, col: 11, offset: 1679},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 66, col: 11, offset: 1679},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 67, col: 3, offset: 1687},
							label: "_m",
							expr: &choiceExpr{
								pos: position{line: 68, col: 5, offset: 1698},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 68, col: 5, offset: 1698},
										name: "store",
									},
									&actionExpr{
										pos: position{line: 69, col: 6, offset: 1713},
										run: (*parser).callonpointer7,
										expr: &seqExpr{
											pos: position{line: 69, col: 6, offset: 1713},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 69, col: 6, offset: 1713},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&labeledExpr{
													pos:   position{line: 69, col: 10, offset: 1717},
													label: "_m",
													expr: &ruleRefExpr{
														pos:  position{line: 69, col: 13, offset: 1720},
														name: "store",
													},
												},
												&litMatcher{
													pos:        position{line: 69, col: 19, offset: 1726},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dblquot",
			pos:  position{line: 74, col: 1, offset: 1825},
			expr: &seqExpr{
				pos: position{line: 74, col: 11, offset: 1835},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 74, col: 11, offset: 1835},
						name: "quot",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 16, offset: 1840},
						name: "quot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "template_end",
			pos:  position{line: 75, col: 1, offset: 1846},
			expr: &seqExpr{
				pos: position{line: 75, col: 16, offset: 1861},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 75, col: 16, offset: 1861},
						name: "eol",
					},
					&ruleRefExpr{
						pos:  position{line: 75, col: 20, offset: 1865},
						name: "dblquot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "template_body",
			pos:  position{line: 76, col: 1, offset: 1874},
			expr: &actionExpr{
				pos: position{line: 76, col: 17, offset: 1890},
				run: (*parser).callontemplate_body1,
				expr: &labeledExpr{
					pos:   position{line: 76, col: 17, offset: 1890},
					label: "_a",
					expr: &zeroOrMoreExpr{
						pos: position{line: 76, col: 20, offset: 1893},
						expr: &actionExpr{
							pos: position{line: 76, col: 22, offset: 1895},
							run: (*parser).callontemplate_body4,
							expr: &seqExpr{
								pos: position{line: 76, col: 22, offset: 1895},
								exprs: []any{
									&labeledExpr{
										pos:   position{line: 76, col: 22, offset: 1895},
										label: "_a",
										expr: &ruleRefExpr{
											pos:  position{line: 76, col: 25, offset: 1898},
											name: "any",
										},
									},
									&notExpr{
										pos: position{line: 76, col: 29, offset: 1902},
										expr: &ruleRefExpr{
											pos:  position{line: 76, col: 30, offset: 1903},
											name: "template_end",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "template",
			pos:  position{line: 77, col: 1, offset: 1979},
			expr: &actionExpr{
				pos: position{line: 78, col: 3, offset: 1994},
				run: (*parser).callontemplate1,
				expr: &seqExpr{
					pos: position{line: 78, col: 3, offset: 1994},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 78, col: 3, offset: 1994},
							name: "dblquot",
						},
						&oneOrMoreExpr{
							pos: position{line: 78, col: 11, offset: 2002},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2002},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 15, offset: 2006},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 18, offset: 2009},
								name: "identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 78, col: 29, offset: 2020},
							label: "_a",
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 32, offset: 2023},
								name: "argument_decl",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 78, col: 46, offset: 2037},
							expr: &ruleRefExpr{
								pos:  position{line: 78, col: 46, offset: 2037},
								name: "ws",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 50, offset: 2041},
							name: "eol",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 3, offset: 2049},
							label: "_b",
							expr: &zeroOrMoreExpr{
								pos: position{line: 79, col: 6, offset: 2052},
								expr: &choiceExpr{
									pos: position{line: 79, col: 8, offset: 2054},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 79, col: 8, offset: 2054},
											name: "reference",
										},
										&actionExpr{
											pos: position{line: 79, col: 18, offset: 2064},
											run: (*parser).callontemplate17,
											expr: &seqExpr{
												pos: position{line: 79, col: 18, offset: 2064},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 79, col: 18, offset: 2064},
														label: "_a",
														expr: &ruleRefExpr{
															pos:  position{line: 79, col: 21, offset: 2067},
															name: "any",
														},
													},
													&notExpr{
														pos: position{line: 79, col: 25, offset: 2071},
														expr: &ruleRefExpr{
															pos:  position{line: 79, col: 26, offset: 2072},
															name: "dblquot",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 80, col: 3, offset: 2128},
							name: "template_end",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "parse",
			pos:  position{line: 89, col: 1, offset: 2361},
			expr: &seqExpr{
				pos: position{line: 89, col: 9, offset: 2369},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 89, col: 9, offset: 2369},
						name: "store",
					},
					&zeroOrMoreExpr{
						pos: position{line: 89, col: 15, offset: 2375},
						expr: &ruleRefExpr{
							pos:  position{line: 89, col: 15, offset: 2375},
							name: "ws",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 19, offset: 2379},
						name: "eq",
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 22, offset: 2382},
						name: "tilda",
					},
					&zeroOrMoreExpr{
						pos: position{line: 89, col: 28, offset: 2388},
						expr: &ruleRefExpr{
							pos:  position{line: 89, col: 28, offset: 2388},
							name: "ws",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 89, col: 32, offset: 2392},
						name: "expression",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_receive",
			pos:  position{line: 91, col: 1, offset: 2406},
			expr: &choiceExpr{
				pos: position{line: 91, col: 16, offset: 2421},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 91, col: 16, offset: 2421},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 91, col: 25, offset: 2430},
						name: "call",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_send",
			pos:  position{line: 92, col: 1, offset: 2436},
			expr: &choiceExpr{
				pos: position{line: 92, col: 13, offset: 2448},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 92, col: 13, offset: 2448},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 22, offset: 2457},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 29, offset: 2464},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 92, col: 41, offset: 2476},
						name: "literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "store",
			pos:  position{line: 94, col: 1, offset: 2487},
			expr: &choiceExpr{
				pos: position{line: 95, col: 3, offset: 2499},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 95, col: 4, offset: 2500},
						run: (*parser).callonstore2,
						expr: &seqExpr{
							pos: position{line: 95, col: 4, offset: 2500},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 95, col: 4, offset: 2500},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 7, offset: 2503},
										name: "store",
									},
								},
								&labeledExpr{
									pos:   position{line: 95, col: 13, offset: 2509},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 16, offset: 2512},
										name: "index",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 99, col: 4, offset: 2629},
						run: (*parser).callonstore8,
						expr: &seqExpr{
							pos: position{line: 99, col: 4, offset: 2629},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 99, col: 4, offset: 2629},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 7, offset: 2632},
										name: "store",
									},
								},
								&litMatcher{
									pos:        position{line: 99, col: 13, offset: 2638},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 99, col: 17, offset: 2642},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 99, col: 20, offset: 2645},
										name: "store",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 103, col: 3, offset: 2761},
						run: (*parser).callonstore15,
						expr: &labeledExpr{
							pos:   position{line: 103, col: 3, offset: 2761},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 103, col: 6, offset: 2764},
								name: "literal",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "condition",
			pos:  position{line: 107, col: 1, offset: 2847},
			expr: &choiceExpr{
				pos: position{line: 108, col: 6, offset: 2864},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 108, col: 6, offset: 2864},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 108, col: 6, offset: 2864},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 108, col: 6, offset: 2864},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 9, offset: 2867},
										name: "expression",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 108, col: 20, offset: 2878},
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 20, offset: 2878},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 108, col: 24, offset: 2882},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 108, col: 28, offset: 2886},
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 28, offset: 2886},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 32, offset: 2890},
									label: "_t",
									expr: &ruleRefExpr{
										pos:  position{line: 108, col: 35, offset: 2893},
										name: "expression",
									},
								},
								&labeledExpr{
									pos:   position{line: 108, col: 46, offset: 2904},
									label: "_f",
									expr: &zeroOrOneExpr{
										pos: position{line: 108, col: 49, offset: 2907},
										expr: &actionExpr{
											pos: position{line: 108, col: 50, offset: 2908},
											run: (*parser).calloncondition15,
											expr: &seqExpr{
												pos: position{line: 108, col: 50, offset: 2908},
												exprs: []any{
													&oneOrMoreExpr{
														pos: position{line: 108, col: 50, offset: 2908},
														expr: &ruleRefExpr{
															pos:  position{line: 108, col: 50, offset: 2908},
															name: "ws",
														},
													},
													&litMatcher{
														pos:        position{line: 108, col: 54, offset: 2912},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 108, col: 58, offset: 2916},
														expr: &ruleRefExpr{
															pos:  position{line: 108, col: 58, offset: 2916},
															name: "ws",
														},
													},
													&labeledExpr{
														pos:   position{line: 108, col: 62, offset: 2920},
														label: "_f",
														expr: &ruleRefExpr{
															pos:  position{line: 108, col: 65, offset: 2923},
															name: "expression",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 111, col: 5, offset: 3062},
						run: (*parser).calloncondition24,
						expr: &seqExpr{
							pos: position{line: 111, col: 5, offset: 3062},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 111, col: 5, offset: 3062},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 111, col: 9, offset: 3066},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 9, offset: 3066},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 111, col: 13, offset: 3070},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 16, offset: 3073},
										name: "expression",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 111, col: 27, offset: 3084},
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 27, offset: 3084},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 111, col: 31, offset: 3088},
									label: "_t",
									expr: &ruleRefExpr{
										pos:  position{line: 111, col: 34, offset: 3091},
										name: "body",
									},
								},
								&labeledExpr{
									pos:   position{line: 111, col: 39, offset: 3096},
									label: "_f",
									expr: &zeroOrOneExpr{
										pos: position{line: 111, col: 42, offset: 3099},
										expr: &actionExpr{
											pos: position{line: 111, col: 43, offset: 3100},
											run: (*parser).calloncondition37,
											expr: &seqExpr{
												pos: position{line: 111, col: 43, offset: 3100},
												exprs: []any{
													&ruleRefExpr{
														pos:  position{line: 111, col: 43, offset: 3100},
														name: "eol",
													},
													&litMatcher{
														pos:        position{line: 111, col: 47, offset: 3104},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 111, col: 51, offset: 3108},
														expr: &ruleRefExpr{
															pos:  position{line: 111, col: 51, offset: 3108},
															name: "ws",
														},
													},
													&labeledExpr{
														pos:   position{line: 111, col: 55, offset: 3112},
														label: "_f",
														expr: &ruleRefExpr{
															pos:  position{line: 111, col: 58, offset: 3115},
															name: "body",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 114, col: 5, offset: 3247},
						run: (*parser).calloncondition45,
						expr: &seqExpr{
							pos: position{line: 114, col: 5, offset: 3247},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 114, col: 5, offset: 3247},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 114, col: 9, offset: 3251},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 9, offset: 3251},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 13, offset: 3255},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 16, offset: 3258},
										name: "expression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 114, col: 27, offset: 3269},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 27, offset: 3269},
										name: "ws",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 114, col: 31, offset: 3273},
									name: "eol",
								},
								&litMatcher{
									pos:        position{line: 114, col: 35, offset: 3277},
									val:        "%",
									ignoreCase: false,
									want:       "\"%\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 114, col: 39, offset: 3281},
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 39, offset: 3281},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 114, col: 43, offset: 3285},
									label: "_f",
									expr: &ruleRefExpr{
										pos:  position{line: 114, col: 46, offset: 3288},
										name: "body",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "each",
			pos:  position{line: 119, col: 1, offset: 3376},
			expr: &actionExpr{
				pos: position{line: 120, col: 5, offset: 3387},
				run: (*parser).calloneach1,
				expr: &seqExpr{
					pos: position{line: 120, col: 5, offset: 3387},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 120, col: 5, offset: 3387},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3391},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 9, offset: 3391},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 13, offset: 3395},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 16, offset: 3398},
								name: "expression",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 120, col: 27, offset: 3409},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 27, offset: 3409},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 31, offset: 3413},
							label: "_b",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 34, offset: 3416},
								name: "body",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "operator",
			pos:  position{line: 122, col: 1, offset: 3483},
			expr: &choiceExpr{
				pos: position{line: 123, col: 3, offset: 3497},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 123, col: 3, offset: 3497},
						name: "each",
					},
					&ruleRefExpr{
						pos:  position{line: 124, col: 3, offset: 3507},
						name: "condition",
					},
					&ruleRefExpr{
						pos:  position{line: 125, col: 3, offset: 3522},
						name: "parse",
					},
					&ruleRefExpr{
						pos:  position{line: 126, col: 3, offset: 3533},
						name: "assign",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 3, offset: 3545},
						name: "write",
					},
					&ruleRefExpr{
						pos:  position{line: 128, col: 3, offset: 3556},
						name: "writeln",
					},
					&ruleRefExpr{
						pos:  position{line: 129, col: 3, offset: 3569},
						name: "invoke",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "list",
			pos:  position{line: 131, col: 1, offset: 3580},
			expr: &actionExpr{
				pos: position{line: 132, col: 5, offset: 3591},
				run: (*parser).callonlist1,
				expr: &seqExpr{
					pos: position{line: 132, col: 5, offset: 3591},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 132, col: 5, offset: 3591},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 132, col: 9, offset: 3595},
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 9, offset: 3595},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 132, col: 13, offset: 3599},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 16, offset: 3602},
								name: "expression_list",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 132, col: 32, offset: 3618},
							expr: &ruleRefExpr{
								pos:  position{line: 132, col: 32, offset: 3618},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 132, col: 36, offset: 3622},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression",
			pos:  position{line: 134, col: 1, offset: 3648},
			expr: &choiceExpr{
				pos: position{line: 135, col: 3, offset: 3664},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 135, col: 3, offset: 3664},
						name: "each",
					},
					&ruleRefExpr{
						pos:  position{line: 136, col: 3, offset: 3674},
						name: "condition",
					},
					&actionExpr{
						pos: position{line: 137, col: 3, offset: 3689},
						run: (*parser).callonexpression4,
						expr: &seqExpr{
							pos: position{line: 137, col: 3, offset: 3689},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 137, col: 3, offset: 3689},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 7, offset: 3693},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 7, offset: 3693},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 137, col: 11, offset: 3697},
									label: "e",
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 13, offset: 3699},
										name: "expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 138, col: 3, offset: 3755},
						run: (*parser).callonexpression11,
						expr: &seqExpr{
							pos: position{line: 138, col: 3, offset: 3755},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 138, col: 3, offset: 3755},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 6, offset: 3758},
										name: "expression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 138, col: 17, offset: 3769},
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 17, offset: 3769},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 138, col: 21, offset: 3773},
									val:        "==",
									ignoreCase: false,
									want:       "\"==\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 138, col: 26, offset: 3778},
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 26, offset: 3778},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 138, col: 30, offset: 3782},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 138, col: 33, offset: 3785},
										name: "expression",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 3, offset: 3860},
						run: (*parser).callonexpression22,
						expr: &seqExpr{
							pos: position{line: 139, col: 3, offset: 3860},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 139, col: 3, offset: 3860},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 6, offset: 3863},
										name: "expression",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 139, col: 17, offset: 3874},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 17, offset: 3874},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 139, col: 21, offset: 3878},
									val:        "!=",
									ignoreCase: false,
									want:       "\"!=\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 139, col: 26, offset: 3883},
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 26, offset: 3883},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 139, col: 30, offset: 3887},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 33, offset: 3890},
										name: "expression",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 140, col: 3, offset: 3974},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 141, col: 3, offset: 3985},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 142, col: 3, offset: 3997},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 143, col: 3, offset: 4012},
						name: "literal",
					},
					&ruleRefExpr{
						pos:  position{line: 144, col: 3, offset: 4025},
						name: "list",
					},
					&seqExpr{
						pos: position{line: 145, col: 4, offset: 4036},
						exprs: []any{
							&labeledExpr{
								pos:   position{line: 145, col: 4, offset: 4036},
								label: "_l",
								expr: &ruleRefExpr{
									pos:  position{line: 145, col: 7, offset: 4039},
									name: "pipe_send",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 17, offset: 4049},
								name: "pipe",
							},
							&labeledExpr{
								pos:   position{line: 145, col: 22, offset: 4054},
								label: "_r",
								expr: &ruleRefExpr{
									pos:  position{line: 145, col: 25, offset: 4057},
									name: "pipe_receive",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 146, col: 5, offset: 4078},
						run: (*parser).callonexpression44,
						expr: &seqExpr{
							pos: position{line: 146, col: 5, offset: 4078},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 146, col: 5, offset: 4078},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 146, col: 9, offset: 4082},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 146, col: 13, offset: 4086},
										name: "expression",
									},
								},
								&litMatcher{
									pos:        position{line: 146, col: 24, offset: 4097},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "block",
			pos:  position{line: 148, col: 1, offset: 4124},
			expr: &actionExpr{
				pos: position{line: 148, col: 8, offset: 4131},
				run: (*parser).callonblock1,
				expr: &seqExpr{
					pos: position{line: 148, col: 8, offset: 4131},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 148, col: 8, offset: 4131},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 148, col: 12, offset: 4135},
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 12, offset: 4135},
								name: "ws",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 148, col: 16, offset: 4139},
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 16, offset: 4139},
								name: "comment",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 25, offset: 4148},
							name: "eol",
						},
						&labeledExpr{
							pos:   position{line: 148, col: 29, offset: 4152},
							label: "_l",
							expr: &zeroOrMoreExpr{
								pos: position{line: 148, col: 32, offset: 4155},
								expr: &ruleRefExpr{
									pos:  position{line: 148, col: 32, offset: 4155},
									name: "line",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 38, offset: 4161},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 148, col: 42, offset: 4165},
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 42, offset: 4165},
								name: "comment",
							},
						},
						&choiceExpr{
							pos: position{line: 148, col: 52, offset: 4175},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 148, col: 52, offset: 4175},
									name: "eol",
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 58, offset: 4181},
									name: "eof",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier_list",
			pos:  position{line: 152, col: 1, offset: 4243},
			expr: &actionExpr{
				pos: position{line: 152, col: 18, offset: 4260},
				run: (*parser).callonidentifier_list1,
				expr: &seqExpr{
					pos: position{line: 152, col: 18, offset: 4260},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 152, col: 18, offset: 4260},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 21, offset: 4263},
								name: "identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 152, col: 32, offset: 4274},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 152, col: 35, offset: 4277},
								expr: &actionExpr{
									pos: position{line: 152, col: 36, offset: 4278},
									run: (*parser).callonidentifier_list7,
									expr: &seqExpr{
										pos: position{line: 152, col: 36, offset: 4278},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 36, offset: 4278},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 36, offset: 4278},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 40, offset: 4282},
												label: "_i",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 44, offset: 4286},
													name: "identifier",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "argument_decl",
			pos:  position{line: 157, col: 1, offset: 4406},
			expr: &actionExpr{
				pos: position{line: 157, col: 17, offset: 4422},
				run: (*parser).callonargument_decl1,
				expr: &seqExpr{
					pos: position{line: 157, col: 17, offset: 4422},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 157, col: 17, offset: 4422},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 157, col: 21, offset: 4426},
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 21, offset: 4426},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 25, offset: 4430},
							label: "_i",
							expr: &zeroOrOneExpr{
								pos: position{line: 157, col: 28, offset: 4433},
								expr: &ruleRefExpr{
									pos:  position{line: 157, col: 28, offset: 4433},
									name: "identifier_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 157, col: 45, offset: 4450},
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 45, offset: 4450},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 157, col: 49, offset: 4454},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "super_expression",
			pos:  position{line: 165, col: 1, offset: 4545},
			expr: &actionExpr{
				pos: position{line: 165, col: 20, offset: 4564},
				run: (*parser).callonsuper_expression1,
				expr: &seqExpr{
					pos: position{line: 165, col: 20, offset: 4564},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 165, col: 20, offset: 4564},
							label: "_s",
							expr: &oneOrMoreExpr{
								pos: position{line: 165, col: 23, offset: 4567},
								expr: &ruleRefExpr{
									pos:  position{line: 165, col: 23, offset: 4567},
									name: "expression",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 165, col: 35, offset: 4579},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 165, col: 38, offset: 4582},
								expr: &actionExpr{
									pos: position{line: 165, col: 39, offset: 4583},
									run: (*parser).callonsuper_expression8,
									expr: &seqExpr{
										pos: position{line: 165, col: 39, offset: 4583},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 165, col: 39, offset: 4583},
												label: "_w",
												expr: &oneOrMoreExpr{
													pos: position{line: 165, col: 42, offset: 4586},
													expr: &ruleRefExpr{
														pos:  position{line: 165, col: 42, offset: 4586},
														name: "ws",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 165, col: 46, offset: 4590},
												label: "_l",
												expr: &oneOrMoreExpr{
													pos: position{line: 165, col: 49, offset: 4593},
													expr: &ruleRefExpr{
														pos:  position{line: 165, col: 49, offset: 4593},
														name: "expression",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "body",
			pos:  position{line: 173, col: 1, offset: 4838},
			expr: &choiceExpr{
				pos: position{line: 173, col: 9, offset: 4846},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 173, col: 9, offset: 4846},
						name: "block",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 17, offset: 4854},
						name: "operator",
					},
					&ruleRefExpr{
						pos:  position{line: 173, col: 28, offset: 4865},
						name: "super_expression",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lambda",
			pos:  position{line: 175, col: 1, offset: 4885},
			expr: &actionExpr{
				pos: position{line: 175, col: 10, offset: 4894},
				run: (*parser).callonlambda1,
				expr: &seqExpr{
					pos: position{line: 175, col: 10, offset: 4894},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 175, col: 10, offset: 4894},
							label: "_a",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 13, offset: 4897},
								name: "argument_decl",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 175, col: 27, offset: 4911},
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 27, offset: 4911},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 176, col: 3, offset: 4919},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 6, offset: 4922},
								name: "body",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "assign",
			pos:  position{line: 183, col: 1, offset: 5040},
			expr: &actionExpr{
				pos: position{line: 183, col: 10, offset: 5049},
				run: (*parser).callonassign1,
				expr: &seqExpr{
					pos: position{line: 183, col: 10, offset: 5049},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 183, col: 10, offset: 5049},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 13, offset: 5052},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 19, offset: 5058},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 19, offset: 5058},
								name: "ws",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 23, offset: 5062},
							name: "eq",
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 26, offset: 5065},
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 26, offset: 5065},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 30, offset: 5069},
							label: "_e",
							expr: &choiceExpr{
								pos: position{line: 183, col: 34, offset: 5073},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 183, col: 34, offset: 5073},
										name: "lambda",
									},
									&ruleRefExpr{
										pos:  position{line: 183, col: 43, offset: 5082},
										name: "expression",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "writeln",
			pos:  position{line: 190, col: 1, offset: 5186},
			expr: &actionExpr{
				pos: position{line: 190, col: 11, offset: 5196},
				run: (*parser).callonwriteln1,
				expr: &seqExpr{
					pos: position{line: 190, col: 11, offset: 5196},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 190, col: 11, offset: 5196},
							name: "quot",
						},
						&zeroOrMoreExpr{
							pos: position{line: 190, col: 16, offset: 5201},
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 16, offset: 5201},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 190, col: 20, offset: 5205},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 23, offset: 5208},
								name: "super_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "write",
			pos:  position{line: 193, col: 1, offset: 5290},
			expr: &actionExpr{
				pos: position{line: 193, col: 9, offset: 5298},
				run: (*parser).callonwrite1,
				expr: &seqExpr{
					pos: position{line: 193, col: 9, offset: 5298},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 193, col: 9, offset: 5298},
							name: "tilda",
						},
						&zeroOrMoreExpr{
							pos: position{line: 193, col: 15, offset: 5304},
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 15, offset: 5304},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 193, col: 19, offset: 5308},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 22, offset: 5311},
								name: "super_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "invoke",
			pos:  position{line: 196, col: 1, offset: 5391},
			expr: &actionExpr{
				pos: position{line: 196, col: 10, offset: 5400},
				run: (*parser).calloninvoke1,
				expr: &seqExpr{
					pos: position{line: 196, col: 10, offset: 5400},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 196, col: 10, offset: 5400},
							name: "amper",
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 16, offset: 5406},
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 16, offset: 5406},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 20, offset: 5410},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 23, offset: 5413},
								name: "super_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier",
			pos:  position{line: 199, col: 1, offset: 5491},
			expr: &actionExpr{
				pos: position{line: 199, col: 14, offset: 5504},
				run: (*parser).callonidentifier1,
				expr: &seqExpr{
					pos: position{line: 199, col: 14, offset: 5504},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 199, col: 15, offset: 5505},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 199, col: 15, offset: 5505},
									name: "unds",
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 22, offset: 5512},
									name: "let",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 199, col: 27, offset: 5517},
							expr: &choiceExpr{
								pos: position{line: 199, col: 28, offset: 5518},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 199, col: 28, offset: 5518},
										name: "dig",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 34, offset: 5524},
										name: "unds",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 41, offset: 5531},
										name: "let",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "literal_list",
			pos:  position{line: 202, col: 1, offset: 5575},
			expr: &actionExpr{
				pos: position{line: 202, col: 16, offset: 5590},
				run: (*parser).callonliteral_list1,
				expr: &seqExpr{
					pos: position{line: 202, col: 16, offset: 5590},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 202, col: 16, offset: 5590},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 18, offset: 5592},
								name: "literal",
							},
						},
						&labeledExpr{
							pos:   position{line: 202, col: 26, offset: 5600},
							label: "r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 202, col: 28, offset: 5602},
								expr: &actionExpr{
									pos: position{line: 202, col: 29, offset: 5603},
									run: (*parser).callonliteral_list7,
									expr: &seqExpr{
										pos: position{line: 202, col: 29, offset: 5603},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 202, col: 29, offset: 5603},
												expr: &ruleRefExpr{
													pos:  position{line: 202, col: 29, offset: 5603},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 202, col: 33, offset: 5607},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 202, col: 35, offset: 5609},
													name: "literal",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "literal",
			pos:  position{line: 207, col: 1, offset: 5709},
			expr: &actionExpr{
				pos: position{line: 207, col: 11, offset: 5719},
				run: (*parser).callonliteral1,
				expr: &labeledExpr{
					pos:   position{line: 207, col: 11, offset: 5719},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 207, col: 15, offset: 5723},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 207, col: 15, offset: 5723},
								run: (*parser).callonliteral4,
								expr: &labeledExpr{
									pos:   position{line: 207, col: 15, offset: 5723},
									label: "l",
									expr: &oneOrMoreExpr{
										pos: position{line: 207, col: 17, offset: 5725},
										expr: &ruleRefExpr{
											pos:  position{line: 207, col: 17, offset: 5725},
											name: "lit",
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 207, col: 50, offset: 5758},
								run: (*parser).callonliteral8,
								expr: &labeledExpr{
									pos:   position{line: 207, col: 50, offset: 5758},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 207, col: 52, offset: 5760},
										name: "quotedString",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lit",
			pos:  position{line: 213, col: 1, offset: 5907},
			expr: &choiceExpr{
				pos: position{line: 213, col: 7, offset: 5913},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 213, col: 8, offset: 5914},
						run: (*parser).callonlit2,
						expr: &seqExpr{
							pos: position{line: 213, col: 8, offset: 5914},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 213, col: 8, offset: 5914},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 213, col: 13, offset: 5919},
									label: "_a",
									expr: &charClassMatcher{
										pos:        position{line: 213, col: 16, offset: 5922},
										val:        "[@!={}()#=&|$<>~'\"?% \\][.]",
										chars:      []rune{'@', '!', '=', '{', '}', '(', ')', '#', '=', '&', '|', '$', '<', '>', '~', '\'', '"', '?', '%', ' ', ']', '[', '.'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 213, col: 83, offset: 5989},
						run: (*parser).callonlit7,
						expr: &choiceExpr{
							pos: position{line: 213, col: 84, offset: 5990},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 213, col: 84, offset: 5990},
									name: "sym",
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 90, offset: 5996},
									name: "let",
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 96, offset: 6002},
									name: "dig",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dig",
			pos:  position{line: 215, col: 1, offset: 6125},
			expr: &charClassMatcher{
				pos:        position{line: 215, col: 7, offset: 6131},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "let",
			pos:  position{line: 216, col: 1, offset: 6138},
			expr: &charClassMatcher{
				pos:        position{line: 216, col: 7, offset: 6144},
				val:        "[a-zA-Z]",
				ranges:     []rune{'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sym",
			pos:  position{line: 217, col: 1, offset: 6154},
			expr: &charClassMatcher{
				pos:        position{line: 217, col: 7, offset: 6160},
				val:        "[^@!={}()#=&|$<>~'\"?% \\n\\r\\t\\][.]",
				chars:      []rune{'@', '!', '=', '{', '}', '(', ')', '#', '=', '&', '|', '$', '<', '>', '~', '\'', '"', '?', '%', ' ', '\n', '\r', '\t', ']', '[', '.'},
				ignoreCase: false,
				inverted:   true,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ws",
			pos:  position{line: 219, col: 1, offset: 6198},
			expr: &choiceExpr{
				pos: position{line: 219, col: 6, offset: 6203},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 219, col: 6, offset: 6203},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 219, col: 12, offset: 6209},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dash",
			pos:  position{line: 220, col: 1, offset: 6215},
			expr: &litMatcher{
				pos:        position{line: 220, col: 8, offset: 6222},
				val:        "-",
				ignoreCase: false,
				want:       "\"-\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "unds",
			pos:  position{line: 221, col: 1, offset: 6227},
			expr: &litMatcher{
				pos:        position{line: 221, col: 8, offset: 6234},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "slsh",
			pos:  position{line: 222, col: 1, offset: 6239},
			expr: &litMatcher{
				pos:        position{line: 222, col: 8, offset: 6246},
				val:        "/",
				ignoreCase: false,
				want:       "\"/\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "bslh",
			pos:  position{line: 223, col: 1, offset: 6251},
			expr: &litMatcher{
				pos:        position{line: 223, col: 8, offset: 6258},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quot",
			pos:  position{line: 224, col: 1, offset: 6264},
			expr: &litMatcher{
				pos:        position{line: 224, col: 8, offset: 6271},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dblsign",
			pos:  position{line: 225, col: 1, offset: 6276},
			expr: &seqExpr{
				pos: position{line: 225, col: 11, offset: 6286},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 225, col: 11, offset: 6286},
						name: "sign",
					},
					&ruleRefExpr{
						pos:  position{line: 225, col: 16, offset: 6291},
						name: "sign",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sign",
			pos:  position{line: 226, col: 1, offset: 6297},
			expr: &litMatcher{
				pos:        position{line: 226, col: 8, offset: 6304},
				val:        "$",
				ignoreCase: false,
				want:       "\"$\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe",
			pos:  position{line: 227, col: 1, offset: 6309},
			expr: &litMatcher{
				pos:        position{line: 227, col: 8, offset: 6316},
				val:        "|",
				ignoreCase: false,
				want:       "\"|\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "gt",
			pos:  position{line: 228, col: 1, offset: 6321},
			expr: &litMatcher{
				pos:        position{line: 228, col: 6, offset: 6326},
				val:        ">",
				ignoreCase: false,
				want:       "\">\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lt",
			pos:  position{line: 229, col: 1, offset: 6331},
			expr: &litMatcher{
				pos:        position{line: 229, col: 6, offset: 6336},
				val:        "<",
				ignoreCase: false,
				want:       "\"<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eq",
			pos:  position{line: 230, col: 1, offset: 6341},
			expr: &litMatcher{
				pos:        position{line: 230, col: 6, offset: 6346},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "amper",
			pos:  position{line: 231, col: 1, offset: 6351},
			expr: &litMatcher{
				pos:        position{line: 231, col: 9, offset: 6359},
				val:        "&",
				ignoreCase: false,
				want:       "\"&\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "tilda",
			pos:  position{line: 232, col: 1, offset: 6364},
			expr: &litMatcher{
				pos:        position{line: 232, col: 9, offset: 6372},
				val:        "~",
				ignoreCase: false,
				want:       "\"~\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_in",
			pos:  position{line: 233, col: 1, offset: 6377},
			expr: &seqExpr{
				pos: position{line: 233, col: 11, offset: 6387},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 233, col: 11, offset: 6387},
						name: "sign",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 16, offset: 6392},
						name: "lt",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "any",
			pos:  position{line: 234, col: 1, offset: 6402},
			expr: &actionExpr{
				pos: position{line: 234, col: 7, offset: 6408},
				run: (*parser).callonany1,
				expr: &anyMatcher{
					line: 234, col: 7, offset: 6408,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eof",
			pos:  position{line: 235, col: 1, offset: 6442},
			expr: &notExpr{
				pos: position{line: 235, col: 7, offset: 6448},
				expr: &anyMatcher{
					line: 235, col: 8, offset: 6449,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onfile1(_s any) (any, error) {

	return arrayify[Expression](_s), nil

}

func (p *parser) callonfile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfile1(stack["_s"])
}

func (c *current) onempty_line1() (any, error) {
	return MakeLiteral(""), nil
}

func (p *parser) callonempty_line1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line1()
}

func (c *current) online3(_c any) (any, error) {
	return _c, nil
}

func (p *parser) callonline3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.online3(stack["_c"])
}

func (c *current) oncomment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloncomment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1()
}

func (c *current) ondirective1(directive any) (any, error) {
	return directive, nil
}

func (p *parser) callondirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective1(stack["directive"])
}

func (c *current) oninclude1(fn any) (any, error) {
	return Include{FileName: fn.(Literal)}, nil
}

func (p *parser) calloninclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude1(stack["fn"])
}

func (c *current) onsingleQuotedString1() (any, error) {
	return MakeParsedString("'", string(c.text[1:len(c.text)-1])), nil
}

func (p *parser) callonsingleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedString1()
}

func (c *current) ondoubleQuotedString1() (any, error) {
	return MakeParsedString("\"", string(c.text[1:len(c.text)-1])), nil
}

func (p *parser) callondoubleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedString1()
}

func (c *current) onexpression_list7(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonexpression_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list7(stack["_e"])
}

func (c *current) onexpression_list1(_e, _r any) (any, error) {

	return ExpressionList(listFrom[Expression](_e, _r)), nil
}

func (p *parser) callonexpression_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list1(stack["_e"], stack["_r"])
}

func (c *current) oncall1(_i, _m any) (any, error) {

	var t ExpressionList

	if _m != nil {
		t = _m.(ExpressionList)
	} else {
		t = ExpressionList{}
	}

	return Call{
		Store:     _i.(StoreAccess),
		Arguments: t}, nil
}

func (p *parser) calloncall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncall1(stack["_i"], stack["_m"])
}

func (c *current) onindex1(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonindex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindex1(stack["_e"])
}

func (c *current) onmember5(s any) (any, error) {
	return unquote(s), nil
}

func (p *parser) callonmember5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmember5(stack["s"])
}

func (c *current) onmember1(_m any) (any, error) {

	return Member{
		Identifier: castify(_m, "")}, nil
}

func (p *parser) callonmember1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmember1(stack["_m"])
}

func (c *current) onreference7(_m any) (any, error) {
	return _m, nil
}

func (p *parser) callonreference7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference7(stack["_m"])
}

func (c *current) onreference1(_m any) (any, error) {

	return Reference{Expression: _m.(Expression)}, nil

}

func (p *parser) callonreference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference1(stack["_m"])
}

func (c *current) onpointer7(_m any) (any, error) {
	return _m, nil
}

func (p *parser) callonpointer7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpointer7(stack["_m"])
}

func (c *current) onpointer1(_m any) (any, error) {

	return Pointer{Expression: _m.(Expression)}, nil

}

func (p *parser) callonpointer1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onpointer1(stack["_m"])
}

func (c *current) ontemplate_body4(_a any) (any, error) {
	return MakeLiteral(_a.(string)), nil
}

func (p *parser) callontemplate_body4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_body4(stack["_a"])
}

func (c *current) ontemplate_body1(_a any) (any, error) {
	return _a, nil
}

func (p *parser) callontemplate_body1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate_body1(stack["_a"])
}

func (c *current) ontemplate17(_a any) (any, error) {
	return MakeLiteral(_a.(string)), nil
}

func (p *parser) callontemplate17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate17(stack["_a"])
}

func (c *current) ontemplate1(_i, _a, _b any) (any, error) {

	e := arrayify[Expression](_b)
	return Assign{
		Store: StoreAccess{Reference: MakeLiteral(_i.(string))},
		Value: Lambda{
			Arguments: _a.(IdentifierList),
			Body:      Expressions(e)}}, nil
}

func (p *parser) callontemplate1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate1(stack["_i"], stack["_a"], stack["_b"])
}

func (c *current) onstore2(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore2(stack["_e"], stack["_i"])
}

func (c *current) onstore8(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore8(stack["_e"], stack["_i"])
}

func (c *current) onstore15(_e any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression)}, nil
}

func (p *parser) callonstore15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore15(stack["_e"])
}

func (c *current) oncondition15(_f any) (any, error) {
	return _f, nil
}

func (p *parser) calloncondition15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition15(stack["_f"])
}

func (c *current) oncondition2(_c, _t, _f any) (any, error) {

	return MakeCondition(_c.(Expression), _t.(Expression), castify[Expression](_f, nil)), nil

}

func (p *parser) calloncondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["_c"], stack["_t"], stack["_f"])
}

func (c *current) oncondition37(_f any) (any, error) {
	return _f, nil
}

func (p *parser) calloncondition37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition37(stack["_f"])
}

func (c *current) oncondition24(_c, _t, _f any) (any, error) {

	return MakeCondition(_c.(Expression), _t.(Expression), castify[Expression](_f, nil)), nil

}

func (p *parser) calloncondition24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition24(stack["_c"], stack["_t"], stack["_f"])
}

func (c *current) oncondition45(_c, _f any) (any, error) {

	return MakeCondition(_c.(Expression), nil, _f.(Expression)), nil

}

func (p *parser) calloncondition45() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition45(stack["_c"], stack["_f"])
}

func (c *current) oneach1(_e, _b any) (any, error) {
	return MakeEach(_e.(Expression), _b.(Expression)), nil
}

func (p *parser) calloneach1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneach1(stack["_e"], stack["_b"])
}

func (c *current) onlist1(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonlist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlist1(stack["_e"])
}

func (c *current) onexpression4(e any) (any, error) {
	return MakeNot(e.(Expression)), nil
}

func (p *parser) callonexpression4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression4(stack["e"])
}

func (c *current) onexpression11(_l, _r any) (any, error) {
	return MakeEqual(_l.(Expression), _r.(Expression)), nil
}

func (p *parser) callonexpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression11(stack["_l"], stack["_r"])
}

func (c *current) onexpression22(_l, _r any) (any, error) {
	return MakeNot(MakeEqual(_l.(Expression), _r.(Expression))), nil
}

func (p *parser) callonexpression22() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression22(stack["_l"], stack["_r"])
}

func (c *current) onexpression44(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonexpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression44(stack["_e"])
}

func (c *current) onblock1(_l any) (any, error) {

	return Block(arrayify[Expression](_l)), nil
}

func (p *parser) callonblock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock1(stack["_l"])
}

func (c *current) onidentifier_list7(_i any) (any, error) {
	return _i, nil
}

func (p *parser) callonidentifier_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list7(stack["_i"])
}

func (c *current) onidentifier_list1(_i, _r any) (any, error) {

	return IdentifierList{
		Identifiers: listFrom[string](_i, _r)}, nil
}

func (p *parser) callonidentifier_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list1(stack["_i"], stack["_r"])
}

func (c *current) onargument_decl1(_i any) (any, error) {

	if _i == nil {
		return IdentifierList{}, nil
	}

	return _i, nil
}

func (p *parser) callonargument_decl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onargument_decl1(stack["_i"])
}

func (c *current) onsuper_expression8(_w, _l any) (any, error) {

	return Expressions{
		MakeLiteral(" "),
		Expressions(arrayify[Expression](_l))}, nil
}

func (p *parser) callonsuper_expression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_expression8(stack["_w"], stack["_l"])
}

func (c *current) onsuper_expression1(_s, _r any) (any, error) {

	return Expressions(listFrom[Expression](Expressions(arrayify[Expression](_s)), _r)), nil

}

func (p *parser) callonsuper_expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_expression1(stack["_s"], stack["_r"])
}

func (c *current) onlambda1(_a, _e any) (any, error) {

	return Lambda{
		Arguments: _a.(IdentifierList),
		Body:      _e.(Expression)}, nil

}

func (p *parser) callonlambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlambda1(stack["_a"], stack["_e"])
}

func (c *current) onassign1(_i, _e any) (any, error) {

	return Assign{
		Store: _i.(StoreAccess),
		Value: _e.(Expression)}, nil
}

func (p *parser) callonassign1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onassign1(stack["_i"], stack["_e"])
}

func (c *current) onwriteln1(_e any) (any, error) {

	return WriteLn{Expression: _e.(Expressions)}, nil
}

func (p *parser) callonwriteln1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwriteln1(stack["_e"])
}

func (c *current) onwrite1(_e any) (any, error) {

	return Write{Expression: _e.(Expressions)}, nil
}

func (p *parser) callonwrite1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwrite1(stack["_e"])
}

func (c *current) oninvoke1(_e any) (any, error) {

	return Invoke{Expressions: _e.(Expressions)}, nil
}

func (p *parser) calloninvoke1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninvoke1(stack["_e"])
}

func (c *current) onidentifier1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonidentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier1()
}

func (c *current) onliteral_list7(t any) (any, error) {

	return t, nil
}

func (p *parser) callonliteral_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral_list7(stack["t"])
}

func (c *current) onliteral_list1(l, r any) (any, error) {

	return (LiteralList)(listFrom[Literal](l, r)), nil

}

func (p *parser) callonliteral_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral_list1(stack["l"], stack["r"])
}

func (c *current) onliteral4(l any) (any, error) {
	return convert(l), nil
}

func (p *parser) callonliteral4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral4(stack["l"])
}

func (c *current) onliteral8(s any) (any, error) {
	return unquote(s), nil
}

func (p *parser) callonliteral8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral8(stack["s"])
}

func (c *current) onliteral1(t any) (any, error) {

	return MakeLiteral(t.(string)), nil
}

func (p *parser) callonliteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral1(stack["t"])
}

func (c *current) onlit2(_a any) (any, error) {
	return string(_a.([]byte)), nil
}

func (p *parser) callonlit2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlit2(stack["_a"])
}

func (c *current) onlit7() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonlit7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlit7()
}

func (c *current) onany1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonany1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onany1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

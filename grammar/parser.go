// Code generated by pigeon; DO NOT EDIT.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "file",
			pos:  position{line: 8, col: 1, offset: 59},
			expr: &zeroOrMoreExpr{
				pos: position{line: 8, col: 8, offset: 66},
				expr: &ruleRefExpr{
					pos:  position{line: 8, col: 8, offset: 66},
					name: "line",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eol",
			pos:  position{line: 10, col: 1, offset: 76},
			expr: &choiceExpr{
				pos: position{line: 10, col: 7, offset: 82},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 10, col: 8, offset: 83},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 10, col: 8, offset: 83},
								expr: &litMatcher{
									pos:        position{line: 10, col: 8, offset: 83},
									val:        "\r",
									ignoreCase: false,
									want:       "\"\\r\"",
								},
							},
							&litMatcher{
								pos:        position{line: 10, col: 14, offset: 89},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 10, col: 22, offset: 97},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "line",
			pos:  position{line: 12, col: 1, offset: 106},
			expr: &actionExpr{
				pos: position{line: 12, col: 8, offset: 113},
				run: (*parser).callonline1,
				expr: &seqExpr{
					pos: position{line: 12, col: 8, offset: 113},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 12, col: 8, offset: 113},
							label: "_l",
							expr: &choiceExpr{
								pos: position{line: 12, col: 12, offset: 117},
								alternatives: []any{
									&actionExpr{
										pos: position{line: 12, col: 12, offset: 117},
										run: (*parser).callonline5,
										expr: &ruleRefExpr{
											pos:  position{line: 12, col: 12, offset: 117},
											name: "comment",
										},
									},
									&actionExpr{
										pos: position{line: 12, col: 41, offset: 146},
										run: (*parser).callonline7,
										expr: &seqExpr{
											pos: position{line: 12, col: 41, offset: 146},
											exprs: []any{
												&labeledExpr{
													pos:   position{line: 12, col: 41, offset: 146},
													label: "_c",
													expr: &ruleRefExpr{
														pos:  position{line: 12, col: 44, offset: 149},
														name: "code",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 12, col: 49, offset: 154},
													expr: &ruleRefExpr{
														pos:  position{line: 12, col: 49, offset: 154},
														name: "comment",
													},
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 12, col: 78, offset: 183},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 12, col: 78, offset: 183},
									name: "eol",
								},
								&ruleRefExpr{
									pos:  position{line: 12, col: 84, offset: 189},
									name: "eof",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "comment",
			pos:  position{line: 14, col: 1, offset: 217},
			expr: &actionExpr{
				pos: position{line: 14, col: 11, offset: 227},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 14, col: 11, offset: 227},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 14, col: 11, offset: 227},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 14, col: 15, offset: 231},
							expr: &seqExpr{
								pos: position{line: 14, col: 16, offset: 232},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 14, col: 16, offset: 232},
										name: "any",
									},
									&notExpr{
										pos: position{line: 14, col: 20, offset: 236},
										expr: &ruleRefExpr{
											pos:  position{line: 14, col: 21, offset: 237},
											name: "eol",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "code",
			pos:  position{line: 15, col: 1, offset: 275},
			expr: &choiceExpr{
				pos: position{line: 15, col: 8, offset: 282},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 15, col: 8, offset: 282},
						name: "directive",
					},
					&ruleRefExpr{
						pos:  position{line: 15, col: 20, offset: 294},
						name: "operator",
					},
					&ruleRefExpr{
						pos:  position{line: 15, col: 31, offset: 305},
						name: "template",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "directive",
			pos:  position{line: 17, col: 1, offset: 317},
			expr: &actionExpr{
				pos: position{line: 17, col: 13, offset: 329},
				run: (*parser).callondirective1,
				expr: &seqExpr{
					pos: position{line: 17, col: 13, offset: 329},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 17, col: 13, offset: 329},
							val:        "// ",
							ignoreCase: false,
							want:       "\"// \"",
						},
						&labeledExpr{
							pos:   position{line: 17, col: 19, offset: 335},
							label: "directive",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 30, offset: 346},
								name: "include",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "include",
			pos:  position{line: 18, col: 1, offset: 382},
			expr: &actionExpr{
				pos: position{line: 18, col: 11, offset: 392},
				run: (*parser).calloninclude1,
				expr: &seqExpr{
					pos: position{line: 18, col: 11, offset: 392},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 18, col: 11, offset: 392},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 18, col: 21, offset: 402},
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 21, offset: 402},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 18, col: 25, offset: 406},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 18, col: 28, offset: 409},
								name: "literal",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quotedString",
			pos:  position{line: 20, col: 1, offset: 469},
			expr: &choiceExpr{
				pos: position{line: 20, col: 16, offset: 484},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 20, col: 16, offset: 484},
						name: "singleQuotedString",
					},
					&actionExpr{
						pos: position{line: 20, col: 37, offset: 505},
						run: (*parser).callonquotedString3,
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 37, offset: 505},
							name: "doubleQuotedString",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "singleQuotedString",
			pos:  position{line: 21, col: 1, offset: 555},
			expr: &actionExpr{
				pos: position{line: 21, col: 22, offset: 576},
				run: (*parser).callonsingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 21, col: 22, offset: 576},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 21, col: 22, offset: 576},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 21, col: 26, offset: 580},
							expr: &choiceExpr{
								pos: position{line: 21, col: 27, offset: 581},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 21, col: 27, offset: 581},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
									&charClassMatcher{
										pos:        position{line: 21, col: 35, offset: 589},
										val:        "[^']",
										chars:      []rune{'\''},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 21, col: 42, offset: 596},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "doubleQuotedString",
			pos:  position{line: 22, col: 1, offset: 632},
			expr: &actionExpr{
				pos: position{line: 22, col: 22, offset: 653},
				run: (*parser).callondoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 22, col: 22, offset: 653},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 22, col: 22, offset: 653},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 22, col: 26, offset: 657},
							expr: &choiceExpr{
								pos: position{line: 22, col: 27, offset: 658},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 22, col: 27, offset: 658},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
									&charClassMatcher{
										pos:        position{line: 22, col: 36, offset: 667},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 22, col: 43, offset: 674},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression_list",
			pos:  position{line: 24, col: 1, offset: 711},
			expr: &actionExpr{
				pos: position{line: 24, col: 19, offset: 729},
				run: (*parser).callonexpression_list1,
				expr: &seqExpr{
					pos: position{line: 24, col: 19, offset: 729},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 24, col: 19, offset: 729},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 22, offset: 732},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 24, col: 33, offset: 743},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 24, col: 36, offset: 746},
								expr: &actionExpr{
									pos: position{line: 24, col: 37, offset: 747},
									run: (*parser).callonexpression_list7,
									expr: &seqExpr{
										pos: position{line: 24, col: 37, offset: 747},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 24, col: 37, offset: 747},
												expr: &ruleRefExpr{
													pos:  position{line: 24, col: 37, offset: 747},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 24, col: 41, offset: 751},
												label: "_e",
												expr: &ruleRefExpr{
													pos:  position{line: 24, col: 44, offset: 754},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "call",
			pos:  position{line: 29, col: 1, offset: 878},
			expr: &actionExpr{
				pos: position{line: 29, col: 8, offset: 885},
				run: (*parser).calloncall1,
				expr: &seqExpr{
					pos: position{line: 29, col: 8, offset: 885},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 29, col: 8, offset: 885},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 11, offset: 888},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 29, col: 17, offset: 894},
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 17, offset: 894},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 29, col: 21, offset: 898},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 29, col: 25, offset: 902},
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 25, offset: 902},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 29, col: 29, offset: 906},
							label: "_m",
							expr: &zeroOrOneExpr{
								pos: position{line: 29, col: 32, offset: 909},
								expr: &ruleRefExpr{
									pos:  position{line: 29, col: 32, offset: 909},
									name: "expression_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 29, col: 49, offset: 926},
							expr: &ruleRefExpr{
								pos:  position{line: 29, col: 49, offset: 926},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 29, col: 53, offset: 930},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "index",
			pos:  position{line: 35, col: 1, offset: 1032},
			expr: &actionExpr{
				pos: position{line: 35, col: 9, offset: 1040},
				run: (*parser).callonindex1,
				expr: &seqExpr{
					pos: position{line: 35, col: 9, offset: 1040},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 35, col: 9, offset: 1040},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 35, col: 13, offset: 1044},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 35, col: 16, offset: 1047},
								name: "expression",
							},
						},
						&litMatcher{
							pos:        position{line: 35, col: 27, offset: 1058},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "member",
			pos:  position{line: 37, col: 1, offset: 1085},
			expr: &actionExpr{
				pos: position{line: 37, col: 10, offset: 1094},
				run: (*parser).callonmember1,
				expr: &labeledExpr{
					pos:   position{line: 37, col: 10, offset: 1094},
					label: "_m",
					expr: &choiceExpr{
						pos: position{line: 37, col: 14, offset: 1098},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 37, col: 14, offset: 1098},
								name: "identifier",
							},
							&ruleRefExpr{
								pos:  position{line: 37, col: 27, offset: 1111},
								name: "quotedString",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "reference",
			pos:  position{line: 42, col: 1, offset: 1194},
			expr: &actionExpr{
				pos: position{line: 42, col: 13, offset: 1206},
				run: (*parser).callonreference1,
				expr: &seqExpr{
					pos: position{line: 42, col: 13, offset: 1206},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 42, col: 13, offset: 1206},
							name: "sign",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 3, offset: 1215},
							label: "_m",
							expr: &choiceExpr{
								pos: position{line: 44, col: 5, offset: 1226},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 44, col: 5, offset: 1226},
										name: "store",
									},
									&actionExpr{
										pos: position{line: 45, col: 6, offset: 1241},
										run: (*parser).callonreference7,
										expr: &seqExpr{
											pos: position{line: 45, col: 6, offset: 1241},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 45, col: 6, offset: 1241},
													val:        "(",
													ignoreCase: false,
													want:       "\"(\"",
												},
												&labeledExpr{
													pos:   position{line: 45, col: 10, offset: 1245},
													label: "_m",
													expr: &ruleRefExpr{
														pos:  position{line: 45, col: 13, offset: 1248},
														name: "store",
													},
												},
												&litMatcher{
													pos:        position{line: 45, col: 19, offset: 1254},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dblquot",
			pos:  position{line: 50, col: 1, offset: 1355},
			expr: &seqExpr{
				pos: position{line: 50, col: 11, offset: 1365},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1365},
						name: "quot",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 16, offset: 1370},
						name: "quot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "template",
			pos:  position{line: 51, col: 1, offset: 1376},
			expr: &seqExpr{
				pos: position{line: 51, col: 12, offset: 1387},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 51, col: 12, offset: 1387},
						name: "dblquot",
					},
					&zeroOrMoreExpr{
						pos: position{line: 51, col: 20, offset: 1395},
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 20, offset: 1395},
							name: "ws",
						},
					},
					&labeledExpr{
						pos:   position{line: 51, col: 24, offset: 1399},
						label: "_i",
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 27, offset: 1402},
							name: "identifier",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 51, col: 38, offset: 1413},
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 38, offset: 1413},
							name: "ws",
						},
					},
					&labeledExpr{
						pos:   position{line: 51, col: 42, offset: 1417},
						label: "_a",
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 45, offset: 1420},
							name: "argument_decl",
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 51, col: 59, offset: 1434},
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 59, offset: 1434},
							name: "comment",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 68, offset: 1443},
						name: "eol",
					},
					&notExpr{
						pos: position{line: 51, col: 72, offset: 1447},
						expr: &ruleRefExpr{
							pos:  position{line: 51, col: 73, offset: 1448},
							name: "dblquot",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 81, offset: 1456},
						name: "dblquot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "parse",
			pos:  position{line: 52, col: 1, offset: 1465},
			expr: &seqExpr{
				pos: position{line: 52, col: 9, offset: 1473},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 52, col: 9, offset: 1473},
						name: "store",
					},
					&zeroOrMoreExpr{
						pos: position{line: 52, col: 15, offset: 1479},
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 15, offset: 1479},
							name: "ws",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 19, offset: 1483},
						name: "eq",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 22, offset: 1486},
						name: "tilda",
					},
					&zeroOrMoreExpr{
						pos: position{line: 52, col: 28, offset: 1492},
						expr: &ruleRefExpr{
							pos:  position{line: 52, col: 28, offset: 1492},
							name: "ws",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 32, offset: 1496},
						name: "expression",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_receive",
			pos:  position{line: 54, col: 1, offset: 1510},
			expr: &choiceExpr{
				pos: position{line: 54, col: 16, offset: 1525},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 54, col: 16, offset: 1525},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 25, offset: 1534},
						name: "call",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_send",
			pos:  position{line: 55, col: 1, offset: 1540},
			expr: &choiceExpr{
				pos: position{line: 55, col: 13, offset: 1552},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 55, col: 13, offset: 1552},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 22, offset: 1561},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 29, offset: 1568},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 41, offset: 1580},
						name: "literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "store",
			pos:  position{line: 57, col: 1, offset: 1591},
			expr: &choiceExpr{
				pos: position{line: 58, col: 3, offset: 1603},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 58, col: 4, offset: 1604},
						run: (*parser).callonstore2,
						expr: &seqExpr{
							pos: position{line: 58, col: 4, offset: 1604},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 58, col: 4, offset: 1604},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 58, col: 7, offset: 1607},
										name: "store",
									},
								},
								&labeledExpr{
									pos:   position{line: 58, col: 13, offset: 1613},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 58, col: 16, offset: 1616},
										name: "index",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 62, col: 4, offset: 1733},
						run: (*parser).callonstore8,
						expr: &seqExpr{
							pos: position{line: 62, col: 4, offset: 1733},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 62, col: 4, offset: 1733},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 7, offset: 1736},
										name: "store",
									},
								},
								&litMatcher{
									pos:        position{line: 62, col: 13, offset: 1742},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 62, col: 17, offset: 1746},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 62, col: 20, offset: 1749},
										name: "store",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 66, col: 3, offset: 1865},
						run: (*parser).callonstore15,
						expr: &labeledExpr{
							pos:   position{line: 66, col: 3, offset: 1865},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 6, offset: 1868},
								name: "literal",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "operator",
			pos:  position{line: 70, col: 1, offset: 1951},
			expr: &choiceExpr{
				pos: position{line: 71, col: 3, offset: 1965},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 71, col: 3, offset: 1965},
						name: "parse",
					},
					&ruleRefExpr{
						pos:  position{line: 72, col: 3, offset: 1976},
						name: "assign",
					},
					&ruleRefExpr{
						pos:  position{line: 73, col: 3, offset: 1988},
						name: "write",
					},
					&ruleRefExpr{
						pos:  position{line: 74, col: 3, offset: 1999},
						name: "invoke",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression",
			pos:  position{line: 76, col: 1, offset: 2010},
			expr: &choiceExpr{
				pos: position{line: 77, col: 3, offset: 2026},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 77, col: 3, offset: 2026},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 78, col: 3, offset: 2037},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 79, col: 3, offset: 2052},
						name: "literal",
					},
					&seqExpr{
						pos: position{line: 80, col: 4, offset: 2066},
						exprs: []any{
							&labeledExpr{
								pos:   position{line: 80, col: 4, offset: 2066},
								label: "_l",
								expr: &ruleRefExpr{
									pos:  position{line: 80, col: 7, offset: 2069},
									name: "pipe_send",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 17, offset: 2079},
								name: "pipe",
							},
							&labeledExpr{
								pos:   position{line: 80, col: 22, offset: 2084},
								label: "_r",
								expr: &ruleRefExpr{
									pos:  position{line: 80, col: 25, offset: 2087},
									name: "pipe_receive",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 81, col: 5, offset: 2108},
						run: (*parser).callonexpression11,
						expr: &seqExpr{
							pos: position{line: 81, col: 5, offset: 2108},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 81, col: 5, offset: 2108},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 81, col: 9, offset: 2112},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 81, col: 13, offset: 2116},
										name: "expression",
									},
								},
								&litMatcher{
									pos:        position{line: 81, col: 24, offset: 2127},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "block",
			pos:  position{line: 83, col: 1, offset: 2154},
			expr: &choiceExpr{
				pos: position{line: 83, col: 8, offset: 2161},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 83, col: 8, offset: 2161},
						exprs: []any{
							&litMatcher{
								pos:        position{line: 83, col: 8, offset: 2161},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 83, col: 12, offset: 2165},
								expr: &ruleRefExpr{
									pos:  position{line: 83, col: 12, offset: 2165},
									name: "ws",
								},
							},
							&zeroOrMoreExpr{
								pos: position{line: 83, col: 16, offset: 2169},
								expr: &ruleRefExpr{
									pos:  position{line: 83, col: 16, offset: 2169},
									name: "comment",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 25, offset: 2178},
								name: "eol",
							},
							&labeledExpr{
								pos:   position{line: 83, col: 29, offset: 2182},
								label: "_l",
								expr: &zeroOrMoreExpr{
									pos: position{line: 83, col: 32, offset: 2185},
									expr: &ruleRefExpr{
										pos:  position{line: 83, col: 32, offset: 2185},
										name: "line",
									},
								},
							},
							&litMatcher{
								pos:        position{line: 83, col: 38, offset: 2191},
								val:        "}",
								ignoreCase: false,
								want:       "\"}\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 83, col: 42, offset: 2195},
								expr: &ruleRefExpr{
									pos:  position{line: 83, col: 42, offset: 2195},
									name: "comment",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 51, offset: 2204},
								name: "eol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 83, col: 57, offset: 2210},
						name: "eof",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier_list",
			pos:  position{line: 85, col: 1, offset: 2217},
			expr: &actionExpr{
				pos: position{line: 85, col: 18, offset: 2234},
				run: (*parser).callonidentifier_list1,
				expr: &seqExpr{
					pos: position{line: 85, col: 18, offset: 2234},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 85, col: 18, offset: 2234},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 21, offset: 2237},
								name: "identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 85, col: 32, offset: 2248},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 85, col: 35, offset: 2251},
								expr: &actionExpr{
									pos: position{line: 85, col: 36, offset: 2252},
									run: (*parser).callonidentifier_list7,
									expr: &seqExpr{
										pos: position{line: 85, col: 36, offset: 2252},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 85, col: 36, offset: 2252},
												expr: &ruleRefExpr{
													pos:  position{line: 85, col: 36, offset: 2252},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 85, col: 40, offset: 2256},
												label: "_i",
												expr: &ruleRefExpr{
													pos:  position{line: 85, col: 44, offset: 2260},
													name: "identifier",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "argument_decl",
			pos:  position{line: 90, col: 1, offset: 2380},
			expr: &actionExpr{
				pos: position{line: 90, col: 17, offset: 2396},
				run: (*parser).callonargument_decl1,
				expr: &seqExpr{
					pos: position{line: 90, col: 17, offset: 2396},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 90, col: 17, offset: 2396},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 90, col: 21, offset: 2400},
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 21, offset: 2400},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 90, col: 25, offset: 2404},
							label: "_i",
							expr: &zeroOrOneExpr{
								pos: position{line: 90, col: 28, offset: 2407},
								expr: &ruleRefExpr{
									pos:  position{line: 90, col: 28, offset: 2407},
									name: "identifier_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 90, col: 45, offset: 2424},
							expr: &ruleRefExpr{
								pos:  position{line: 90, col: 45, offset: 2424},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 90, col: 49, offset: 2428},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lambda",
			pos:  position{line: 97, col: 1, offset: 2517},
			expr: &actionExpr{
				pos: position{line: 97, col: 10, offset: 2526},
				run: (*parser).callonlambda1,
				expr: &seqExpr{
					pos: position{line: 97, col: 10, offset: 2526},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 97, col: 10, offset: 2526},
							label: "_a",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 13, offset: 2529},
								name: "argument_decl",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 97, col: 27, offset: 2543},
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 27, offset: 2543},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 31, offset: 2547},
							label: "_e",
							expr: &choiceExpr{
								pos: position{line: 97, col: 35, offset: 2551},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 97, col: 35, offset: 2551},
										name: "block",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 43, offset: 2559},
										name: "operator",
									},
									&actionExpr{
										pos: position{line: 97, col: 54, offset: 2570},
										run: (*parser).callonlambda11,
										expr: &labeledExpr{
											pos:   position{line: 97, col: 54, offset: 2570},
											label: "_e",
											expr: &zeroOrMoreExpr{
												pos: position{line: 97, col: 57, offset: 2573},
												expr: &ruleRefExpr{
													pos:  position{line: 97, col: 57, offset: 2573},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "assign",
			pos:  position{line: 102, col: 1, offset: 2735},
			expr: &actionExpr{
				pos: position{line: 102, col: 10, offset: 2744},
				run: (*parser).callonassign1,
				expr: &seqExpr{
					pos: position{line: 102, col: 10, offset: 2744},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 102, col: 10, offset: 2744},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 13, offset: 2747},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 102, col: 19, offset: 2753},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 19, offset: 2753},
								name: "ws",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 23, offset: 2757},
							name: "eq",
						},
						&zeroOrMoreExpr{
							pos: position{line: 102, col: 26, offset: 2760},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 26, offset: 2760},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 30, offset: 2764},
							label: "_e",
							expr: &choiceExpr{
								pos: position{line: 102, col: 34, offset: 2768},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 102, col: 34, offset: 2768},
										name: "lambda",
									},
									&ruleRefExpr{
										pos:  position{line: 102, col: 42, offset: 2776},
										name: "expression",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "write",
			pos:  position{line: 109, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 109, col: 9, offset: 2888},
				run: (*parser).callonwrite1,
				expr: &seqExpr{
					pos: position{line: 109, col: 9, offset: 2888},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 109, col: 9, offset: 2888},
							name: "quot",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 14, offset: 2893},
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 14, offset: 2893},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 18, offset: 2897},
							label: "_e",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 21, offset: 2900},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 21, offset: 2900},
									name: "expression",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "invoke",
			pos:  position{line: 112, col: 1, offset: 2984},
			expr: &actionExpr{
				pos: position{line: 112, col: 10, offset: 2993},
				run: (*parser).calloninvoke1,
				expr: &seqExpr{
					pos: position{line: 112, col: 10, offset: 2993},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 112, col: 10, offset: 2993},
							name: "amper",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 16, offset: 2999},
							label: "_e",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 19, offset: 3002},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3002},
									name: "expression",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier",
			pos:  position{line: 115, col: 1, offset: 3087},
			expr: &actionExpr{
				pos: position{line: 115, col: 14, offset: 3100},
				run: (*parser).callonidentifier1,
				expr: &seqExpr{
					pos: position{line: 115, col: 14, offset: 3100},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 115, col: 15, offset: 3101},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 115, col: 15, offset: 3101},
									name: "unds",
								},
								&ruleRefExpr{
									pos:  position{line: 115, col: 22, offset: 3108},
									name: "let",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 27, offset: 3113},
							expr: &choiceExpr{
								pos: position{line: 115, col: 28, offset: 3114},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 115, col: 28, offset: 3114},
										name: "dig",
									},
									&ruleRefExpr{
										pos:  position{line: 115, col: 34, offset: 3120},
										name: "unds",
									},
									&ruleRefExpr{
										pos:  position{line: 115, col: 41, offset: 3127},
										name: "let",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "literal_list",
			pos:  position{line: 118, col: 1, offset: 3171},
			expr: &actionExpr{
				pos: position{line: 118, col: 16, offset: 3186},
				run: (*parser).callonliteral_list1,
				expr: &seqExpr{
					pos: position{line: 118, col: 16, offset: 3186},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 118, col: 16, offset: 3186},
							label: "l",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 18, offset: 3188},
								name: "literal",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 26, offset: 3196},
							label: "r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 118, col: 28, offset: 3198},
								expr: &actionExpr{
									pos: position{line: 118, col: 29, offset: 3199},
									run: (*parser).callonliteral_list7,
									expr: &seqExpr{
										pos: position{line: 118, col: 29, offset: 3199},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 118, col: 29, offset: 3199},
												expr: &ruleRefExpr{
													pos:  position{line: 118, col: 29, offset: 3199},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 118, col: 33, offset: 3203},
												label: "t",
												expr: &ruleRefExpr{
													pos:  position{line: 118, col: 35, offset: 3205},
													name: "literal",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "literal",
			pos:  position{line: 123, col: 1, offset: 3305},
			expr: &actionExpr{
				pos: position{line: 123, col: 11, offset: 3315},
				run: (*parser).callonliteral1,
				expr: &labeledExpr{
					pos:   position{line: 123, col: 11, offset: 3315},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 123, col: 15, offset: 3319},
						alternatives: []any{
							&actionExpr{
								pos: position{line: 123, col: 15, offset: 3319},
								run: (*parser).callonliteral4,
								expr: &oneOrMoreExpr{
									pos: position{line: 123, col: 15, offset: 3319},
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 15, offset: 3319},
										name: "lit",
									},
								},
							},
							&actionExpr{
								pos: position{line: 123, col: 52, offset: 3356},
								run: (*parser).callonliteral7,
								expr: &labeledExpr{
									pos:   position{line: 123, col: 52, offset: 3356},
									label: "s",
									expr: &ruleRefExpr{
										pos:  position{line: 123, col: 54, offset: 3358},
										name: "quotedString",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lit",
			pos:  position{line: 128, col: 1, offset: 3446},
			expr: &choiceExpr{
				pos: position{line: 128, col: 7, offset: 3452},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 128, col: 7, offset: 3452},
						name: "sym",
					},
					&ruleRefExpr{
						pos:  position{line: 128, col: 13, offset: 3458},
						name: "let",
					},
					&ruleRefExpr{
						pos:  position{line: 128, col: 19, offset: 3464},
						name: "dig",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dig",
			pos:  position{line: 129, col: 1, offset: 3469},
			expr: &charClassMatcher{
				pos:        position{line: 129, col: 7, offset: 3475},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "let",
			pos:  position{line: 130, col: 1, offset: 3482},
			expr: &charClassMatcher{
				pos:        position{line: 130, col: 7, offset: 3488},
				val:        "[a-zA-Z]",
				ranges:     []rune{'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sym",
			pos:  position{line: 131, col: 1, offset: 3498},
			expr: &choiceExpr{
				pos: position{line: 131, col: 7, offset: 3504},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 131, col: 7, offset: 3504},
						name: "dash",
					},
					&ruleRefExpr{
						pos:  position{line: 131, col: 14, offset: 3511},
						name: "unds",
					},
					&ruleRefExpr{
						pos:  position{line: 131, col: 21, offset: 3518},
						name: "slsh",
					},
					&ruleRefExpr{
						pos:  position{line: 131, col: 28, offset: 3525},
						name: "bslh",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ws",
			pos:  position{line: 133, col: 1, offset: 3533},
			expr: &choiceExpr{
				pos: position{line: 133, col: 6, offset: 3538},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 133, col: 6, offset: 3538},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 133, col: 12, offset: 3544},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dash",
			pos:  position{line: 134, col: 1, offset: 3550},
			expr: &litMatcher{
				pos:        position{line: 134, col: 8, offset: 3557},
				val:        "-",
				ignoreCase: false,
				want:       "\"-\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "unds",
			pos:  position{line: 135, col: 1, offset: 3562},
			expr: &litMatcher{
				pos:        position{line: 135, col: 8, offset: 3569},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "slsh",
			pos:  position{line: 136, col: 1, offset: 3574},
			expr: &litMatcher{
				pos:        position{line: 136, col: 8, offset: 3581},
				val:        "/",
				ignoreCase: false,
				want:       "\"/\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "bslh",
			pos:  position{line: 137, col: 1, offset: 3586},
			expr: &litMatcher{
				pos:        position{line: 137, col: 8, offset: 3593},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quot",
			pos:  position{line: 138, col: 1, offset: 3599},
			expr: &litMatcher{
				pos:        position{line: 138, col: 8, offset: 3606},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sign",
			pos:  position{line: 139, col: 1, offset: 3611},
			expr: &litMatcher{
				pos:        position{line: 139, col: 8, offset: 3618},
				val:        "$",
				ignoreCase: false,
				want:       "\"$\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe",
			pos:  position{line: 140, col: 1, offset: 3623},
			expr: &litMatcher{
				pos:        position{line: 140, col: 8, offset: 3630},
				val:        "|",
				ignoreCase: false,
				want:       "\"|\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "gt",
			pos:  position{line: 141, col: 1, offset: 3635},
			expr: &litMatcher{
				pos:        position{line: 141, col: 6, offset: 3640},
				val:        ">",
				ignoreCase: false,
				want:       "\">\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lt",
			pos:  position{line: 142, col: 1, offset: 3645},
			expr: &litMatcher{
				pos:        position{line: 142, col: 6, offset: 3650},
				val:        "<",
				ignoreCase: false,
				want:       "\"<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eq",
			pos:  position{line: 143, col: 1, offset: 3655},
			expr: &litMatcher{
				pos:        position{line: 143, col: 6, offset: 3660},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "amper",
			pos:  position{line: 144, col: 1, offset: 3665},
			expr: &litMatcher{
				pos:        position{line: 144, col: 9, offset: 3673},
				val:        "&",
				ignoreCase: false,
				want:       "\"&\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "tilda",
			pos:  position{line: 145, col: 1, offset: 3678},
			expr: &litMatcher{
				pos:        position{line: 145, col: 9, offset: 3686},
				val:        "~",
				ignoreCase: false,
				want:       "\"~\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "pipe_in",
			pos:  position{line: 146, col: 1, offset: 3691},
			expr: &seqExpr{
				pos: position{line: 146, col: 11, offset: 3701},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 146, col: 11, offset: 3701},
						name: "sign",
					},
					&ruleRefExpr{
						pos:  position{line: 146, col: 16, offset: 3706},
						name: "lt",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "any",
			pos:  position{line: 147, col: 1, offset: 3716},
			expr: &anyMatcher{
				line: 147, col: 7, offset: 3722,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eof",
			pos:  position{line: 148, col: 1, offset: 3725},
			expr: &notExpr{
				pos: position{line: 148, col: 7, offset: 3731},
				expr: &anyMatcher{
					line: 148, col: 8, offset: 3732,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) online5() (any, error) {
	return nil, nil
}

func (p *parser) callonline5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.online5()
}

func (c *current) online7(_c any) (any, error) {
	return _c, nil
}

func (p *parser) callonline7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.online7(stack["_c"])
}

func (c *current) online1(_l any) (any, error) {
	{
		return _l, nil
	}
}

func (p *parser) callonline1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.online1(stack["_l"])
}

func (c *current) oncomment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloncomment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1()
}

func (c *current) ondirective1(directive any) (any, error) {
	return directive, nil
}

func (p *parser) callondirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective1(stack["directive"])
}

func (c *current) oninclude1(fn any) (any, error) {
	return Include{FileName: fn.(Literal)}, nil
}

func (p *parser) calloninclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude1(stack["fn"])
}

func (c *current) onquotedString3() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonquotedString3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onquotedString3()
}

func (c *current) onsingleQuotedString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonsingleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedString1()
}

func (c *current) ondoubleQuotedString1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callondoubleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedString1()
}

func (c *current) onexpression_list7(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonexpression_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list7(stack["_e"])
}

func (c *current) onexpression_list1(_e, _r any) (any, error) {

	return ExpressionList{
		Expressions: listFrom[Expression](_e, _r)}, nil
}

func (p *parser) callonexpression_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list1(stack["_e"], stack["_r"])
}

func (c *current) oncall1(_i, _m any) (any, error) {

	return Call{
		Store:     _i.(StoreAccess),
		Arguments: _m.(ExpressionList)}, nil
}

func (p *parser) calloncall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncall1(stack["_i"], stack["_m"])
}

func (c *current) onindex1(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonindex1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindex1(stack["_e"])
}

func (c *current) onmember1(_m any) (any, error) {

	return Member{
		Identifier: castify(_m, "")}, nil
}

func (p *parser) callonmember1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmember1(stack["_m"])
}

func (c *current) onreference7(_m any) (any, error) {
	return _m, nil
}

func (p *parser) callonreference7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference7(stack["_m"])
}

func (c *current) onreference1(_m any) (any, error) {

	return Reference{Expression: _m.(Expression)}, nil

}

func (p *parser) callonreference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference1(stack["_m"])
}

func (c *current) onstore2(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore2(stack["_e"], stack["_i"])
}

func (c *current) onstore8(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore8(stack["_e"], stack["_i"])
}

func (c *current) onstore15(_e any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression)}, nil
}

func (p *parser) callonstore15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore15(stack["_e"])
}

func (c *current) onexpression11(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonexpression11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression11(stack["_e"])
}

func (c *current) onidentifier_list7(_i any) (any, error) {
	return _i, nil
}

func (p *parser) callonidentifier_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list7(stack["_i"])
}

func (c *current) onidentifier_list1(_i, _r any) (any, error) {

	return IdentifierList{
		Identifiers: listFrom[string](_i, _r)}, nil
}

func (p *parser) callonidentifier_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list1(stack["_i"], stack["_r"])
}

func (c *current) onargument_decl1(_i any) (any, error) {

	if _i == nil {
		return IdentifierList{}, nil
	}

	return _i, nil
}

func (p *parser) callonargument_decl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onargument_decl1(stack["_i"])
}

func (c *current) onlambda11(_e any) (any, error) {

	return Expressions(arrayify[Expression](_e)), nil
}

func (p *parser) callonlambda11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlambda11(stack["_e"])
}

func (c *current) onlambda1(_a, _e any) (any, error) {

	return Lambda{Arguments: _a.(IdentifierList), Body: _e.(Expression)}, nil
}

func (p *parser) callonlambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlambda1(stack["_a"], stack["_e"])
}

func (c *current) onassign1(_i, _e any) (any, error) {

	return Assign{
		Store: _i.(StoreAccess),
		Value: _e.(Expression)}, nil
}

func (p *parser) callonassign1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onassign1(stack["_i"], stack["_e"])
}

func (c *current) onwrite1(_e any) (any, error) {

	return Write{Expressions: arrayify[Expression](_e)}, nil
}

func (p *parser) callonwrite1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwrite1(stack["_e"])
}

func (c *current) oninvoke1(_e any) (any, error) {

	return Invoke{Expressions: arrayify[Expression](_e)}, nil
}

func (p *parser) calloninvoke1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninvoke1(stack["_e"])
}

func (c *current) onidentifier1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonidentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier1()
}

func (c *current) onliteral_list7(t any) (any, error) {

	return t, nil
}

func (p *parser) callonliteral_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral_list7(stack["t"])
}

func (c *current) onliteral_list1(l, r any) (any, error) {

	return (LiteralList)(listFrom[Literal](l, r)), nil

}

func (p *parser) callonliteral_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral_list1(stack["l"], stack["r"])
}

func (c *current) onliteral4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonliteral4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral4()
}

func (c *current) onliteral7(s any) (any, error) {
	return s, nil
}

func (p *parser) callonliteral7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral7(stack["s"])
}

func (c *current) onliteral1(t any) (any, error) {

	return MakeLiteral(t.(string)), nil

}

func (p *parser) callonliteral1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral1(stack["t"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	var (
		val any
		ok  bool
	)

	if rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	val, ok := p.parseExpr(expr)

	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

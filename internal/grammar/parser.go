// Code generated by pigeon; DO NOT EDIT.

package grammar

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/beysed/like/internal/grammar/common"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "bom",
			pos:  position{line: 6, col: 1, offset: 86},
			expr: &choiceExpr{
				pos: position{line: 6, col: 7, offset: 92},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 6, col: 7, offset: 92},
						val:        "\ufeff",
						ignoreCase: false,
						want:       "\"\\ufeff\"",
					},
					&litMatcher{
						pos:        position{line: 6, col: 24, offset: 109},
						val:        "\xfe\xff",
						ignoreCase: false,
						want:       "\"\\xfe\\xff\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "file",
			pos:  position{line: 7, col: 1, offset: 121},
			expr: &actionExpr{
				pos: position{line: 8, col: 3, offset: 131},
				run: (*parser).callonfile1,
				expr: &seqExpr{
					pos: position{line: 8, col: 3, offset: 131},
					exprs: []any{
						&zeroOrOneExpr{
							pos: position{line: 8, col: 3, offset: 131},
							expr: &ruleRefExpr{
								pos:  position{line: 8, col: 3, offset: 131},
								name: "bom",
							},
						},
						&labeledExpr{
							pos:   position{line: 8, col: 8, offset: 136},
							label: "_s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 8, col: 11, offset: 139},
								expr: &ruleRefExpr{
									pos:  position{line: 8, col: 11, offset: 139},
									name: "line",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 8, col: 17, offset: 145},
							name: "eof",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eol",
			pos:  position{line: 12, col: 1, offset: 202},
			expr: &choiceExpr{
				pos: position{line: 12, col: 7, offset: 208},
				alternatives: []any{
					&seqExpr{
						pos: position{line: 12, col: 8, offset: 209},
						exprs: []any{
							&zeroOrOneExpr{
								pos: position{line: 12, col: 8, offset: 209},
								expr: &litMatcher{
									pos:        position{line: 12, col: 8, offset: 209},
									val:        "\r",
									ignoreCase: false,
									want:       "\"\\r\"",
								},
							},
							&litMatcher{
								pos:        position{line: 12, col: 14, offset: 215},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
						},
					},
					&litMatcher{
						pos:        position{line: 12, col: 22, offset: 223},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eoa",
			pos:  position{line: 14, col: 1, offset: 232},
			expr: &choiceExpr{
				pos: position{line: 14, col: 7, offset: 238},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 14, col: 7, offset: 238},
						name: "eol",
					},
					&ruleRefExpr{
						pos:  position{line: 14, col: 13, offset: 244},
						name: "eof",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "empty_line",
			pos:  position{line: 16, col: 1, offset: 251},
			expr: &actionExpr{
				pos: position{line: 17, col: 5, offset: 267},
				run: (*parser).callonempty_line1,
				expr: &choiceExpr{
					pos: position{line: 17, col: 6, offset: 268},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 17, col: 6, offset: 268},
							name: "eol",
						},
						&seqExpr{
							pos: position{line: 17, col: 12, offset: 274},
							exprs: []any{
								&oneOrMoreExpr{
									pos: position{line: 17, col: 12, offset: 274},
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 12, offset: 274},
										name: "ws",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 16, offset: 278},
									name: "eoa",
								},
							},
						},
						&seqExpr{
							pos: position{line: 17, col: 22, offset: 284},
							exprs: []any{
								&zeroOrMoreExpr{
									pos: position{line: 17, col: 22, offset: 284},
									expr: &ruleRefExpr{
										pos:  position{line: 17, col: 22, offset: 284},
										name: "ws",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 26, offset: 288},
									name: "comment",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 296},
									name: "eoa",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "code_line",
			pos:  position{line: 19, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 19, col: 12, offset: 347},
				run: (*parser).calloncode_line1,
				expr: &seqExpr{
					pos: position{line: 19, col: 12, offset: 347},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 19, col: 12, offset: 347},
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 12, offset: 347},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 19, col: 16, offset: 351},
							label: "_c",
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 19, offset: 354},
								name: "code",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 19, col: 24, offset: 359},
							expr: &ruleRefExpr{
								pos:  position{line: 19, col: 24, offset: 359},
								name: "comment",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 33, offset: 368},
							name: "eoa",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "line",
			pos:  position{line: 20, col: 1, offset: 392},
			expr: &choiceExpr{
				pos: position{line: 20, col: 8, offset: 399},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 20, col: 8, offset: 399},
						name: "template",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 19, offset: 410},
						name: "code_line",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 31, offset: 422},
						name: "empty_line",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "comment",
			pos:  position{line: 22, col: 1, offset: 436},
			expr: &actionExpr{
				pos: position{line: 22, col: 11, offset: 446},
				run: (*parser).calloncomment1,
				expr: &seqExpr{
					pos: position{line: 22, col: 11, offset: 446},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 22, col: 11, offset: 446},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 22, col: 15, offset: 450},
							expr: &seqExpr{
								pos: position{line: 22, col: 16, offset: 451},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 22, col: 16, offset: 451},
										name: "any",
									},
									&notExpr{
										pos: position{line: 22, col: 20, offset: 455},
										expr: &ruleRefExpr{
											pos:  position{line: 22, col: 21, offset: 456},
											name: "eoa",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 22, col: 27, offset: 462},
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 27, offset: 462},
								name: "any",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "code",
			pos:  position{line: 23, col: 1, offset: 499},
			expr: &choiceExpr{
				pos: position{line: 23, col: 8, offset: 506},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 23, col: 8, offset: 506},
						name: "expression",
					},
					&ruleRefExpr{
						pos:  position{line: 23, col: 21, offset: 519},
						name: "directive",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "directive",
			pos:  position{line: 25, col: 1, offset: 532},
			expr: &actionExpr{
				pos: position{line: 25, col: 13, offset: 544},
				run: (*parser).callondirective1,
				expr: &seqExpr{
					pos: position{line: 25, col: 13, offset: 544},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 25, col: 13, offset: 544},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 548},
							label: "directive",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 28, offset: 559},
								name: "include",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "include",
			pos:  position{line: 26, col: 1, offset: 595},
			expr: &actionExpr{
				pos: position{line: 26, col: 11, offset: 605},
				run: (*parser).calloninclude1,
				expr: &seqExpr{
					pos: position{line: 26, col: 11, offset: 605},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 26, col: 11, offset: 605},
							val:        "include",
							ignoreCase: false,
							want:       "\"include\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 26, col: 21, offset: 615},
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 21, offset: 615},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 26, col: 25, offset: 619},
							label: "fn",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 28, offset: 622},
								name: "expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quotedString",
			pos:  position{line: 28, col: 1, offset: 688},
			expr: &choiceExpr{
				pos: position{line: 28, col: 16, offset: 703},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 28, col: 16, offset: 703},
						name: "singleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 28, col: 37, offset: 724},
						name: "doubleQuotedString",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "singleQuotedString",
			pos:  position{line: 29, col: 1, offset: 744},
			expr: &actionExpr{
				pos: position{line: 29, col: 22, offset: 765},
				run: (*parser).callonsingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 29, col: 22, offset: 765},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 29, col: 22, offset: 765},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 29, col: 26, offset: 769},
							expr: &choiceExpr{
								pos: position{line: 29, col: 27, offset: 770},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 29, col: 27, offset: 770},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
									&charClassMatcher{
										pos:        position{line: 29, col: 35, offset: 778},
										val:        "[^']",
										chars:      []rune{'\''},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 29, col: 42, offset: 785},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "doubleQuotedString",
			pos:  position{line: 30, col: 1, offset: 861},
			expr: &actionExpr{
				pos: position{line: 30, col: 22, offset: 882},
				run: (*parser).callondoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 30, col: 22, offset: 882},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 30, col: 22, offset: 882},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 30, col: 26, offset: 886},
							expr: &choiceExpr{
								pos: position{line: 30, col: 27, offset: 887},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 30, col: 27, offset: 887},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
									&charClassMatcher{
										pos:        position{line: 30, col: 36, offset: 896},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 30, col: 43, offset: 903},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression_list",
			pos:  position{line: 32, col: 1, offset: 981},
			expr: &actionExpr{
				pos: position{line: 32, col: 19, offset: 999},
				run: (*parser).callonexpression_list1,
				expr: &seqExpr{
					pos: position{line: 32, col: 19, offset: 999},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 32, col: 19, offset: 999},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 32, col: 22, offset: 1002},
								name: "expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 33, offset: 1013},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 36, offset: 1016},
								expr: &actionExpr{
									pos: position{line: 32, col: 37, offset: 1017},
									run: (*parser).callonexpression_list7,
									expr: &seqExpr{
										pos: position{line: 32, col: 37, offset: 1017},
										exprs: []any{
											&zeroOrMoreExpr{
												pos: position{line: 32, col: 37, offset: 1017},
												expr: &ruleRefExpr{
													pos:  position{line: 32, col: 37, offset: 1017},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 32, col: 41, offset: 1021},
												label: "_e",
												expr: &ruleRefExpr{
													pos:  position{line: 32, col: 44, offset: 1024},
													name: "expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "named_expression",
			pos:  position{line: 36, col: 1, offset: 1126},
			expr: &actionExpr{
				pos: position{line: 36, col: 20, offset: 1145},
				run: (*parser).callonnamed_expression1,
				expr: &seqExpr{
					pos: position{line: 36, col: 20, offset: 1145},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 36, col: 20, offset: 1145},
							label: "_i",
							expr: &zeroOrOneExpr{
								pos: position{line: 36, col: 23, offset: 1148},
								expr: &actionExpr{
									pos: position{line: 36, col: 24, offset: 1149},
									run: (*parser).callonnamed_expression5,
									expr: &seqExpr{
										pos: position{line: 36, col: 24, offset: 1149},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 36, col: 24, offset: 1149},
												label: "_i",
												expr: &ruleRefExpr{
													pos:  position{line: 36, col: 27, offset: 1152},
													name: "identifier",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 36, col: 38, offset: 1163},
												expr: &ruleRefExpr{
													pos:  position{line: 36, col: 38, offset: 1163},
													name: "ws",
												},
											},
											&litMatcher{
												pos:        position{line: 36, col: 42, offset: 1167},
												val:        ":",
												ignoreCase: false,
												want:       "\":\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 36, col: 46, offset: 1171},
												expr: &ruleRefExpr{
													pos:  position{line: 36, col: 46, offset: 1171},
													name: "ws",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 36, col: 69, offset: 1194},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 36, col: 72, offset: 1197},
								name: "expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "named_expression_list",
			pos:  position{line: 47, col: 1, offset: 1367},
			expr: &actionExpr{
				pos: position{line: 47, col: 25, offset: 1391},
				run: (*parser).callonnamed_expression_list1,
				expr: &seqExpr{
					pos: position{line: 47, col: 25, offset: 1391},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 47, col: 25, offset: 1391},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 28, offset: 1394},
								name: "named_expression",
							},
						},
						&labeledExpr{
							pos:   position{line: 47, col: 45, offset: 1411},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 47, col: 48, offset: 1414},
								expr: &actionExpr{
									pos: position{line: 47, col: 50, offset: 1416},
									run: (*parser).callonnamed_expression_list7,
									expr: &seqExpr{
										pos: position{line: 47, col: 50, offset: 1416},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 47, col: 50, offset: 1416},
												expr: &choiceExpr{
													pos: position{line: 47, col: 51, offset: 1417},
													alternatives: []any{
														&ruleRefExpr{
															pos:  position{line: 47, col: 51, offset: 1417},
															name: "ws",
														},
														&ruleRefExpr{
															pos:  position{line: 47, col: 56, offset: 1422},
															name: "eol",
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 47, col: 62, offset: 1428},
												label: "_e",
												expr: &ruleRefExpr{
													pos:  position{line: 47, col: 65, offset: 1431},
													name: "named_expression",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "call",
			pos:  position{line: 51, col: 1, offset: 1549},
			expr: &actionExpr{
				pos: position{line: 51, col: 8, offset: 1556},
				run: (*parser).calloncall1,
				expr: &seqExpr{
					pos: position{line: 51, col: 8, offset: 1556},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 51, col: 8, offset: 1556},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 11, offset: 1559},
								name: "reference",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 51, col: 21, offset: 1569},
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 21, offset: 1569},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 51, col: 25, offset: 1573},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 51, col: 29, offset: 1577},
							expr: &choiceExpr{
								pos: position{line: 51, col: 30, offset: 1578},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 51, col: 30, offset: 1578},
										name: "ws",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 33, offset: 1581},
										name: "eol",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 51, col: 39, offset: 1587},
							label: "_m",
							expr: &zeroOrOneExpr{
								pos: position{line: 51, col: 42, offset: 1590},
								expr: &ruleRefExpr{
									pos:  position{line: 51, col: 42, offset: 1590},
									name: "named_expression_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 51, col: 65, offset: 1613},
							expr: &choiceExpr{
								pos: position{line: 51, col: 66, offset: 1614},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 51, col: 66, offset: 1614},
										name: "ws",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 69, offset: 1617},
										name: "eol",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 51, col: 75, offset: 1623},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "index",
			pos:  position{line: 65, col: 1, offset: 1843},
			expr: &choiceExpr{
				pos: position{line: 66, col: 7, offset: 1856},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 66, col: 7, offset: 1856},
						run: (*parser).callonindex2,
						expr: &seqExpr{
							pos: position{line: 66, col: 7, offset: 1856},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 66, col: 7, offset: 1856},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 66, col: 11, offset: 1860},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 66, col: 14, offset: 1863},
										name: "expression",
									},
								},
								&litMatcher{
									pos:        position{line: 66, col: 25, offset: 1874},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 67, col: 7, offset: 1904},
						run: (*parser).callonindex8,
						expr: &seqExpr{
							pos: position{line: 67, col: 7, offset: 1904},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 67, col: 7, offset: 1904},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 67, col: 11, offset: 1908},
									label: "_s",
									expr: &ruleRefExpr{
										pos:  position{line: 67, col: 14, offset: 1911},
										name: "store",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "member",
			pos:  position{line: 69, col: 1, offset: 1940},
			expr: &actionExpr{
				pos: position{line: 69, col: 10, offset: 1949},
				run: (*parser).callonmember1,
				expr: &labeledExpr{
					pos:   position{line: 69, col: 10, offset: 1949},
					label: "_m",
					expr: &choiceExpr{
						pos: position{line: 69, col: 14, offset: 1953},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 69, col: 14, offset: 1953},
								name: "identifier",
							},
							&labeledExpr{
								pos:   position{line: 69, col: 27, offset: 1966},
								label: "s",
								expr: &ruleRefExpr{
									pos:  position{line: 69, col: 29, offset: 1968},
									name: "quotedString",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "reference",
			pos:  position{line: 74, col: 1, offset: 2053},
			expr: &actionExpr{
				pos: position{line: 74, col: 13, offset: 2065},
				run: (*parser).callonreference1,
				expr: &seqExpr{
					pos: position{line: 74, col: 13, offset: 2065},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 74, col: 13, offset: 2065},
							name: "sign",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 3, offset: 2073},
							label: "_a",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 7, offset: 2077},
								name: "store",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "reference_paren",
			pos:  position{line: 77, col: 1, offset: 2145},
			expr: &actionExpr{
				pos: position{line: 77, col: 19, offset: 2163},
				run: (*parser).callonreference_paren1,
				expr: &seqExpr{
					pos: position{line: 77, col: 19, offset: 2163},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 77, col: 19, offset: 2163},
							name: "sign",
						},
						&litMatcher{
							pos:        position{line: 77, col: 24, offset: 2168},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 77, col: 28, offset: 2172},
							label: "_m",
							expr: &ruleRefExpr{
								pos:  position{line: 77, col: 31, offset: 2175},
								name: "expression",
							},
						},
						&litMatcher{
							pos:        position{line: 77, col: 42, offset: 2186},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "reference_block",
			pos:  position{line: 79, col: 1, offset: 2252},
			expr: &actionExpr{
				pos: position{line: 79, col: 19, offset: 2270},
				run: (*parser).callonreference_block1,
				expr: &seqExpr{
					pos: position{line: 79, col: 19, offset: 2270},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 79, col: 19, offset: 2270},
							val:        "${",
							ignoreCase: false,
							want:       "\"${\"",
						},
						&labeledExpr{
							pos:   position{line: 79, col: 24, offset: 2275},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 28, offset: 2279},
								name: "expression",
							},
						},
						&litMatcher{
							pos:        position{line: 79, col: 39, offset: 2290},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "string_content",
			pos:  position{line: 81, col: 1, offset: 2316},
			expr: &actionExpr{
				pos: position{line: 82, col: 5, offset: 2336},
				run: (*parser).callonstring_content1,
				expr: &seqExpr{
					pos: position{line: 82, col: 5, offset: 2336},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 82, col: 5, offset: 2336},
							label: "_q",
							expr: &zeroOrMoreExpr{
								pos: position{line: 82, col: 8, offset: 2339},
								expr: &choiceExpr{
									pos: position{line: 82, col: 9, offset: 2340},
									alternatives: []any{
										&actionExpr{
											pos: position{line: 82, col: 9, offset: 2340},
											run: (*parser).callonstring_content6,
											expr: &labeledExpr{
												pos:   position{line: 82, col: 9, offset: 2340},
												label: "_b",
												expr: &ruleRefExpr{
													pos:  position{line: 82, col: 12, offset: 2343},
													name: "escaped",
												},
											},
										},
										&actionExpr{
											pos: position{line: 83, col: 5, offset: 2396},
											run: (*parser).callonstring_content9,
											expr: &litMatcher{
												pos:        position{line: 83, col: 5, offset: 2396},
												val:        "\\b",
												ignoreCase: false,
												want:       "\"\\\\b\"",
											},
										},
										&actionExpr{
											pos: position{line: 84, col: 5, offset: 2440},
											run: (*parser).callonstring_content11,
											expr: &litMatcher{
												pos:        position{line: 84, col: 5, offset: 2440},
												val:        "\\f",
												ignoreCase: false,
												want:       "\"\\\\f\"",
											},
										},
										&actionExpr{
											pos: position{line: 85, col: 5, offset: 2484},
											run: (*parser).callonstring_content13,
											expr: &litMatcher{
												pos:        position{line: 85, col: 5, offset: 2484},
												val:        "\\n",
												ignoreCase: false,
												want:       "\"\\\\n\"",
											},
										},
										&actionExpr{
											pos: position{line: 86, col: 5, offset: 2528},
											run: (*parser).callonstring_content15,
											expr: &litMatcher{
												pos:        position{line: 86, col: 5, offset: 2528},
												val:        "\\r",
												ignoreCase: false,
												want:       "\"\\\\r\"",
											},
										},
										&actionExpr{
											pos: position{line: 87, col: 5, offset: 2572},
											run: (*parser).callonstring_content17,
											expr: &litMatcher{
												pos:        position{line: 87, col: 5, offset: 2572},
												val:        "\\t",
												ignoreCase: false,
												want:       "\"\\\\t\"",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 88, col: 5, offset: 2616},
											name: "call",
										},
										&ruleRefExpr{
											pos:  position{line: 89, col: 5, offset: 2626},
											name: "reference",
										},
										&ruleRefExpr{
											pos:  position{line: 90, col: 5, offset: 2641},
											name: "reference_paren",
										},
										&ruleRefExpr{
											pos:  position{line: 91, col: 5, offset: 2662},
											name: "reference_block",
										},
										&actionExpr{
											pos: position{line: 92, col: 5, offset: 2683},
											run: (*parser).callonstring_content23,
											expr: &ruleRefExpr{
												pos:  position{line: 92, col: 5, offset: 2683},
												name: "ws",
											},
										},
										&actionExpr{
											pos: position{line: 93, col: 4, offset: 2734},
											run: (*parser).callonstring_content25,
											expr: &labeledExpr{
												pos:   position{line: 93, col: 4, offset: 2734},
												label: "_a",
												expr: &oneOrMoreExpr{
													pos: position{line: 93, col: 7, offset: 2737},
													expr: &charClassMatcher{
														pos:        position{line: 93, col: 7, offset: 2737},
														val:        "[^ \\t\\\\$]",
														chars:      []rune{' ', '\t', '\\', '$'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 63, offset: 2793},
							name: "eof",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dblquot",
			pos:  position{line: 97, col: 1, offset: 2860},
			expr: &seqExpr{
				pos: position{line: 97, col: 11, offset: 2870},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 97, col: 11, offset: 2870},
						name: "quot",
					},
					&ruleRefExpr{
						pos:  position{line: 97, col: 16, offset: 2875},
						name: "quot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "template",
			pos:  position{line: 98, col: 1, offset: 2881},
			expr: &actionExpr{
				pos: position{line: 99, col: 3, offset: 2895},
				run: (*parser).callontemplate1,
				expr: &seqExpr{
					pos: position{line: 99, col: 3, offset: 2895},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 99, col: 3, offset: 2895},
							name: "dblquot",
						},
						&oneOrMoreExpr{
							pos: position{line: 99, col: 11, offset: 2903},
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 11, offset: 2903},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 15, offset: 2907},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 18, offset: 2910},
								name: "identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 99, col: 29, offset: 2921},
							label: "_a",
							expr: &zeroOrOneExpr{
								pos: position{line: 99, col: 32, offset: 2924},
								expr: &ruleRefExpr{
									pos:  position{line: 99, col: 32, offset: 2924},
									name: "argument_decl",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 99, col: 47, offset: 2939},
							expr: &ruleRefExpr{
								pos:  position{line: 99, col: 47, offset: 2939},
								name: "ws",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 99, col: 51, offset: 2943},
							name: "eol",
						},
						&labeledExpr{
							pos:   position{line: 100, col: 3, offset: 2950},
							label: "_s",
							expr: &zeroOrMoreExpr{
								pos: position{line: 100, col: 6, offset: 2953},
								expr: &actionExpr{
									pos: position{line: 100, col: 7, offset: 2954},
									run: (*parser).callontemplate16,
									expr: &seqExpr{
										pos: position{line: 100, col: 7, offset: 2954},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 100, col: 7, offset: 2954},
												label: "_s",
												expr: &ruleRefExpr{
													pos:  position{line: 100, col: 10, offset: 2957},
													name: "any",
												},
											},
											&notExpr{
												pos: position{line: 100, col: 14, offset: 2961},
												expr: &litMatcher{
													pos:        position{line: 100, col: 15, offset: 2962},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 3, offset: 2991},
							name: "eol",
						},
						&ruleRefExpr{
							pos:  position{line: 101, col: 7, offset: 2995},
							name: "dblquot",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "parse_data",
			pos:  position{line: 110, col: 1, offset: 3193},
			expr: &actionExpr{
				pos: position{line: 111, col: 5, offset: 3209},
				run: (*parser).callonparse_data1,
				expr: &seqExpr{
					pos: position{line: 111, col: 5, offset: 3209},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 111, col: 5, offset: 3209},
							name: "colon",
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 11, offset: 3215},
							name: "lt",
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 14, offset: 3218},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 14, offset: 3218},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 18, offset: 3222},
							label: "_f",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 21, offset: 3225},
								name: "literal",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 29, offset: 3233},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 29, offset: 3233},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 33, offset: 3237},
							label: "_d",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 36, offset: 3240},
								name: "expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "format_data",
			pos:  position{line: 117, col: 1, offset: 3353},
			expr: &actionExpr{
				pos: position{line: 118, col: 5, offset: 3370},
				run: (*parser).callonformat_data1,
				expr: &seqExpr{
					pos: position{line: 118, col: 5, offset: 3370},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 118, col: 5, offset: 3370},
							name: "colon",
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 11, offset: 3376},
							name: "gt",
						},
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 14, offset: 3379},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 14, offset: 3379},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 18, offset: 3383},
							label: "_f",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 21, offset: 3386},
								name: "literal",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 118, col: 29, offset: 3394},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 29, offset: 3394},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 33, offset: 3398},
							label: "_d",
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 36, offset: 3401},
								name: "expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "store",
			pos:  position{line: 124, col: 1, offset: 3515},
			expr: &choiceExpr{
				pos: position{line: 125, col: 3, offset: 3526},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 125, col: 4, offset: 3527},
						run: (*parser).callonstore2,
						expr: &seqExpr{
							pos: position{line: 125, col: 4, offset: 3527},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 125, col: 4, offset: 3527},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 7, offset: 3530},
										name: "store",
									},
								},
								&labeledExpr{
									pos:   position{line: 125, col: 13, offset: 3536},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 125, col: 16, offset: 3539},
										name: "index",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 129, col: 4, offset: 3653},
						run: (*parser).callonstore8,
						expr: &seqExpr{
							pos: position{line: 129, col: 4, offset: 3653},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 129, col: 4, offset: 3653},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 129, col: 7, offset: 3656},
										name: "store",
									},
								},
								&litMatcher{
									pos:        position{line: 129, col: 13, offset: 3662},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&labeledExpr{
									pos:   position{line: 129, col: 17, offset: 3666},
									label: "_i",
									expr: &ruleRefExpr{
										pos:  position{line: 129, col: 20, offset: 3669},
										name: "store",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 133, col: 3, offset: 3782},
						run: (*parser).callonstore15,
						expr: &labeledExpr{
							pos:   position{line: 133, col: 3, offset: 3782},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 6, offset: 3785},
								name: "identifier",
							},
						},
					},
					&actionExpr{
						pos: position{line: 136, col: 3, offset: 3880},
						run: (*parser).callonstore18,
						expr: &labeledExpr{
							pos:   position{line: 136, col: 3, offset: 3880},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 6, offset: 3883},
								name: "quotedString",
							},
						},
					},
					&actionExpr{
						pos: position{line: 139, col: 3, offset: 3971},
						run: (*parser).callonstore21,
						expr: &seqExpr{
							pos: position{line: 139, col: 3, offset: 3971},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 139, col: 3, offset: 3971},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 139, col: 6, offset: 3974},
										name: "reference",
									},
								},
								&labeledExpr{
									pos:   position{line: 139, col: 16, offset: 3984},
									label: "_i",
									expr: &zeroOrOneExpr{
										pos: position{line: 139, col: 19, offset: 3987},
										expr: &ruleRefExpr{
											pos:  position{line: 139, col: 19, offset: 3987},
											name: "index",
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "condition",
			pos:  position{line: 148, col: 1, offset: 4166},
			expr: &choiceExpr{
				pos: position{line: 149, col: 6, offset: 4182},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 149, col: 6, offset: 4182},
						run: (*parser).calloncondition2,
						expr: &seqExpr{
							pos: position{line: 149, col: 6, offset: 4182},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 149, col: 6, offset: 4182},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 9, offset: 4185},
										name: "piped",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 15, offset: 4191},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 15, offset: 4191},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 149, col: 19, offset: 4195},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 23, offset: 4199},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 23, offset: 4199},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 27, offset: 4203},
									label: "_t",
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 30, offset: 4206},
										name: "piped",
									},
								},
								&labeledExpr{
									pos:   position{line: 149, col: 36, offset: 4212},
									label: "_f",
									expr: &zeroOrOneExpr{
										pos: position{line: 149, col: 39, offset: 4215},
										expr: &actionExpr{
											pos: position{line: 149, col: 40, offset: 4216},
											run: (*parser).calloncondition15,
											expr: &seqExpr{
												pos: position{line: 149, col: 40, offset: 4216},
												exprs: []any{
													&oneOrMoreExpr{
														pos: position{line: 149, col: 40, offset: 4216},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 40, offset: 4216},
															name: "ws",
														},
													},
													&litMatcher{
														pos:        position{line: 149, col: 44, offset: 4220},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 149, col: 48, offset: 4224},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 48, offset: 4224},
															name: "ws",
														},
													},
													&labeledExpr{
														pos:   position{line: 149, col: 52, offset: 4228},
														label: "_f",
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 55, offset: 4231},
															name: "piped",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 152, col: 5, offset: 4359},
						run: (*parser).calloncondition24,
						expr: &seqExpr{
							pos: position{line: 152, col: 5, offset: 4359},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 152, col: 5, offset: 4359},
									val:        "?",
									ignoreCase: false,
									want:       "\"?\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 9, offset: 4363},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 9, offset: 4363},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 13, offset: 4367},
									label: "_c",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 16, offset: 4370},
										name: "expression",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 27, offset: 4381},
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 27, offset: 4381},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 31, offset: 4385},
									label: "_t",
									expr: &ruleRefExpr{
										pos:  position{line: 152, col: 34, offset: 4388},
										name: "body",
									},
								},
								&labeledExpr{
									pos:   position{line: 152, col: 39, offset: 4393},
									label: "_f",
									expr: &zeroOrOneExpr{
										pos: position{line: 152, col: 42, offset: 4396},
										expr: &actionExpr{
											pos: position{line: 152, col: 43, offset: 4397},
											run: (*parser).calloncondition37,
											expr: &seqExpr{
												pos: position{line: 152, col: 43, offset: 4397},
												exprs: []any{
													&oneOrMoreExpr{
														pos: position{line: 152, col: 43, offset: 4397},
														expr: &ruleRefExpr{
															pos:  position{line: 152, col: 43, offset: 4397},
															name: "ws",
														},
													},
													&litMatcher{
														pos:        position{line: 152, col: 47, offset: 4401},
														val:        "%",
														ignoreCase: false,
														want:       "\"%\"",
													},
													&oneOrMoreExpr{
														pos: position{line: 152, col: 51, offset: 4405},
														expr: &ruleRefExpr{
															pos:  position{line: 152, col: 51, offset: 4405},
															name: "ws",
														},
													},
													&labeledExpr{
														pos:   position{line: 152, col: 55, offset: 4409},
														label: "_f",
														expr: &ruleRefExpr{
															pos:  position{line: 152, col: 58, offset: 4412},
															name: "body",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "each",
			pos:  position{line: 156, col: 1, offset: 4536},
			expr: &actionExpr{
				pos: position{line: 157, col: 5, offset: 4546},
				run: (*parser).calloneach1,
				expr: &seqExpr{
					pos: position{line: 157, col: 5, offset: 4546},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 157, col: 5, offset: 4546},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 157, col: 9, offset: 4550},
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 9, offset: 4550},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 13, offset: 4554},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 16, offset: 4557},
								name: "expression",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 157, col: 27, offset: 4568},
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 27, offset: 4568},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 157, col: 31, offset: 4572},
							label: "_b",
							expr: &ruleRefExpr{
								pos:  position{line: 157, col: 34, offset: 4575},
								name: "body",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "list",
			pos:  position{line: 159, col: 1, offset: 4642},
			expr: &actionExpr{
				pos: position{line: 160, col: 5, offset: 4652},
				run: (*parser).callonlist1,
				expr: &seqExpr{
					pos: position{line: 160, col: 5, offset: 4652},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 160, col: 5, offset: 4652},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 160, col: 9, offset: 4656},
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 9, offset: 4656},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 160, col: 13, offset: 4660},
							label: "_e",
							expr: &zeroOrOneExpr{
								pos: position{line: 160, col: 16, offset: 4663},
								expr: &ruleRefExpr{
									pos:  position{line: 160, col: 16, offset: 4663},
									name: "expression_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 160, col: 33, offset: 4680},
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 33, offset: 4680},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 160, col: 37, offset: 4684},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "object",
			pos:  position{line: 168, col: 1, offset: 4793},
			expr: &choiceExpr{
				pos: position{line: 169, col: 5, offset: 4805},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 4805},
						run: (*parser).callonobject2,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 4805},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 4805},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 169, col: 9, offset: 4809},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 9, offset: 4809},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 169, col: 13, offset: 4813},
									label: "_n",
									expr: &zeroOrOneExpr{
										pos: position{line: 169, col: 16, offset: 4816},
										expr: &ruleRefExpr{
											pos:  position{line: 169, col: 16, offset: 4816},
											name: "named_expression_list",
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 169, col: 39, offset: 4839},
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 39, offset: 4839},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 43, offset: 4843},
									val:        "}",
									ignoreCase: false,
									want:       "\"}\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 175, col: 5, offset: 5003},
						run: (*parser).callonobject13,
						expr: &seqExpr{
							pos: position{line: 175, col: 5, offset: 5003},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 175, col: 5, offset: 5003},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 175, col: 9, offset: 5007},
									label: "_e",
									expr: &ruleRefExpr{
										pos:  position{line: 175, col: 13, offset: 5011},
										name: "expression",
									},
								},
								&litMatcher{
									pos:        position{line: 175, col: 24, offset: 5022},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "output",
			pos:  position{line: 177, col: 1, offset: 5050},
			expr: &choiceExpr{
				pos: position{line: 178, col: 3, offset: 5062},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 178, col: 3, offset: 5062},
						name: "writeErr",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 3, offset: 5076},
						name: "writeErrLn",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 3, offset: 5092},
						name: "write",
					},
					&ruleRefExpr{
						pos:  position{line: 181, col: 3, offset: 5103},
						name: "writeln",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "piped",
			pos:  position{line: 183, col: 1, offset: 5115},
			expr: &choiceExpr{
				pos: position{line: 184, col: 3, offset: 5126},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 184, col: 3, offset: 5126},
						name: "not",
					},
					&ruleRefExpr{
						pos:  position{line: 185, col: 3, offset: 5135},
						name: "equal",
					},
					&ruleRefExpr{
						pos:  position{line: 186, col: 3, offset: 5146},
						name: "not_equal",
					},
					&ruleRefExpr{
						pos:  position{line: 187, col: 3, offset: 5161},
						name: "output",
					},
					&ruleRefExpr{
						pos:  position{line: 188, col: 3, offset: 5173},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 189, col: 3, offset: 5185},
						name: "parse_data",
					},
					&ruleRefExpr{
						pos:  position{line: 190, col: 3, offset: 5201},
						name: "format_data",
					},
					&ruleRefExpr{
						pos:  position{line: 191, col: 3, offset: 5218},
						name: "condition",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 3, offset: 5232},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 3, offset: 5243},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 194, col: 3, offset: 5258},
						name: "reference_paren",
					},
					&ruleRefExpr{
						pos:  position{line: 195, col: 3, offset: 5279},
						name: "quotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 196, col: 3, offset: 5297},
						name: "list",
					},
					&ruleRefExpr{
						pos:  position{line: 197, col: 3, offset: 5307},
						name: "object",
					},
					&ruleRefExpr{
						pos:  position{line: 198, col: 3, offset: 5319},
						name: "literal",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "not",
			pos:  position{line: 200, col: 1, offset: 5331},
			expr: &actionExpr{
				pos: position{line: 201, col: 5, offset: 5340},
				run: (*parser).callonnot1,
				expr: &seqExpr{
					pos: position{line: 201, col: 5, offset: 5340},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 201, col: 5, offset: 5340},
							val:        "!",
							ignoreCase: false,
							want:       "\"!\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 9, offset: 5344},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 9, offset: 5344},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 201, col: 13, offset: 5348},
							label: "e",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 15, offset: 5350},
								name: "piped",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "equal",
			pos:  position{line: 203, col: 1, offset: 5400},
			expr: &actionExpr{
				pos: position{line: 204, col: 7, offset: 5413},
				run: (*parser).callonequal1,
				expr: &seqExpr{
					pos: position{line: 204, col: 7, offset: 5413},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 204, col: 7, offset: 5413},
							label: "_l",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 10, offset: 5416},
								name: "piped",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 204, col: 16, offset: 5422},
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 16, offset: 5422},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 204, col: 20, offset: 5426},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 204, col: 25, offset: 5431},
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 25, offset: 5431},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 29, offset: 5435},
							label: "_r",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 32, offset: 5438},
								name: "piped",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "not_equal",
			pos:  position{line: 206, col: 1, offset: 5507},
			expr: &actionExpr{
				pos: position{line: 207, col: 7, offset: 5524},
				run: (*parser).callonnot_equal1,
				expr: &seqExpr{
					pos: position{line: 207, col: 7, offset: 5524},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 207, col: 7, offset: 5524},
							label: "_l",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 10, offset: 5527},
								name: "piped",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 16, offset: 5533},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 16, offset: 5533},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 5537},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 25, offset: 5542},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 25, offset: 5542},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 207, col: 29, offset: 5546},
							label: "_r",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 32, offset: 5549},
								name: "piped",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "add",
			pos:  position{line: 209, col: 1, offset: 5627},
			expr: &actionExpr{
				pos: position{line: 210, col: 7, offset: 5638},
				run: (*parser).callonadd1,
				expr: &seqExpr{
					pos: position{line: 210, col: 7, offset: 5638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 210, col: 7, offset: 5638},
							label: "_l",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 10, offset: 5641},
								name: "piped",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 210, col: 16, offset: 5647},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 16, offset: 5647},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 210, col: 20, offset: 5651},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 210, col: 24, offset: 5655},
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 24, offset: 5655},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 210, col: 28, offset: 5659},
							label: "_r",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 31, offset: 5662},
								name: "piped",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "expression",
			pos:  position{line: 212, col: 1, offset: 5729},
			expr: &choiceExpr{
				pos: position{line: 213, col: 3, offset: 5745},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 213, col: 3, offset: 5745},
						name: "assign",
					},
					&ruleRefExpr{
						pos:  position{line: 214, col: 3, offset: 5757},
						name: "assign_add",
					},
					&ruleRefExpr{
						pos:  position{line: 215, col: 3, offset: 5773},
						name: "parse_data",
					},
					&ruleRefExpr{
						pos:  position{line: 216, col: 3, offset: 5789},
						name: "format_data",
					},
					&ruleRefExpr{
						pos:  position{line: 217, col: 3, offset: 5806},
						name: "each",
					},
					&ruleRefExpr{
						pos:  position{line: 218, col: 3, offset: 5816},
						name: "condition",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 3, offset: 5831},
						name: "not",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 3, offset: 5840},
						name: "add",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 3, offset: 5849},
						name: "equal",
					},
					&ruleRefExpr{
						pos:  position{line: 222, col: 3, offset: 5860},
						name: "not_equal",
					},
					&actionExpr{
						pos: position{line: 223, col: 3, offset: 5875},
						run: (*parser).callonexpression12,
						expr: &seqExpr{
							pos: position{line: 223, col: 3, offset: 5875},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 223, col: 3, offset: 5875},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 6, offset: 5878},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 12, offset: 5884},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 12, offset: 5884},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 16, offset: 5888},
									val:        "|",
									ignoreCase: false,
									want:       "\"|\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 20, offset: 5892},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 20, offset: 5892},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 223, col: 24, offset: 5896},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 27, offset: 5899},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 33, offset: 5905},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 33, offset: 5905},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 223, col: 37, offset: 5909},
									label: "_e",
									expr: &zeroOrOneExpr{
										pos: position{line: 223, col: 40, offset: 5912},
										expr: &ruleRefExpr{
											pos:  position{line: 223, col: 40, offset: 5912},
											name: "piped",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 3, offset: 6015},
						run: (*parser).callonexpression28,
						expr: &seqExpr{
							pos: position{line: 224, col: 3, offset: 6015},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 224, col: 3, offset: 6015},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 6, offset: 6018},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 224, col: 12, offset: 6024},
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 12, offset: 6024},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 224, col: 16, offset: 6028},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 224, col: 21, offset: 6033},
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 21, offset: 6033},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 25, offset: 6037},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 28, offset: 6040},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 224, col: 34, offset: 6046},
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 34, offset: 6046},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 224, col: 38, offset: 6050},
									label: "_e",
									expr: &zeroOrOneExpr{
										pos: position{line: 224, col: 41, offset: 6053},
										expr: &ruleRefExpr{
											pos:  position{line: 224, col: 41, offset: 6053},
											name: "piped",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 3, offset: 6162},
						run: (*parser).callonexpression44,
						expr: &seqExpr{
							pos: position{line: 225, col: 3, offset: 6162},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 225, col: 3, offset: 6162},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 6, offset: 6165},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 12, offset: 6171},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 12, offset: 6171},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 16, offset: 6175},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 20, offset: 6179},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 20, offset: 6179},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 24, offset: 6183},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 27, offset: 6186},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 33, offset: 6192},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 33, offset: 6192},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 225, col: 37, offset: 6196},
									label: "_e",
									expr: &zeroOrOneExpr{
										pos: position{line: 225, col: 40, offset: 6199},
										expr: &ruleRefExpr{
											pos:  position{line: 225, col: 40, offset: 6199},
											name: "piped",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 226, col: 3, offset: 6305},
						run: (*parser).callonexpression60,
						expr: &seqExpr{
							pos: position{line: 226, col: 3, offset: 6305},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 226, col: 3, offset: 6305},
									label: "_l",
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 6, offset: 6308},
										name: "piped",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 226, col: 12, offset: 6314},
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 12, offset: 6314},
										name: "ws",
									},
								},
								&litMatcher{
									pos:        position{line: 226, col: 16, offset: 6318},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 226, col: 20, offset: 6322},
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 20, offset: 6322},
										name: "ws",
									},
								},
								&labeledExpr{
									pos:   position{line: 226, col: 24, offset: 6326},
									label: "_r",
									expr: &ruleRefExpr{
										pos:  position{line: 226, col: 27, offset: 6329},
										name: "piped",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 227, col: 3, offset: 6413},
						name: "invoke",
					},
					&ruleRefExpr{
						pos:  position{line: 228, col: 3, offset: 6425},
						name: "output",
					},
					&ruleRefExpr{
						pos:  position{line: 229, col: 3, offset: 6437},
						name: "lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 3, offset: 6449},
						name: "call",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 3, offset: 6460},
						name: "reference",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 3, offset: 6475},
						name: "reference_paren",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 3, offset: 6496},
						name: "quotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 234, col: 3, offset: 6514},
						name: "list",
					},
					&ruleRefExpr{
						pos:  position{line: 235, col: 3, offset: 6524},
						name: "object",
					},
					&ruleRefExpr{
						pos:  position{line: 236, col: 3, offset: 6536},
						name: "literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "block",
			pos:  position{line: 238, col: 1, offset: 6548},
			expr: &actionExpr{
				pos: position{line: 238, col: 8, offset: 6555},
				run: (*parser).callonblock1,
				expr: &seqExpr{
					pos: position{line: 238, col: 8, offset: 6555},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 238, col: 8, offset: 6555},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 12, offset: 6559},
							name: "eol",
						},
						&labeledExpr{
							pos:   position{line: 238, col: 16, offset: 6563},
							label: "_l",
							expr: &zeroOrMoreExpr{
								pos: position{line: 238, col: 19, offset: 6566},
								expr: &ruleRefExpr{
									pos:  position{line: 238, col: 19, offset: 6566},
									name: "line",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 25, offset: 6572},
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 25, offset: 6572},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 238, col: 29, offset: 6576},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier_list",
			pos:  position{line: 242, col: 1, offset: 6635},
			expr: &actionExpr{
				pos: position{line: 242, col: 18, offset: 6652},
				run: (*parser).callonidentifier_list1,
				expr: &seqExpr{
					pos: position{line: 242, col: 18, offset: 6652},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 242, col: 18, offset: 6652},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 21, offset: 6655},
								name: "identifier",
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 32, offset: 6666},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 242, col: 35, offset: 6669},
								expr: &actionExpr{
									pos: position{line: 242, col: 36, offset: 6670},
									run: (*parser).callonidentifier_list7,
									expr: &seqExpr{
										pos: position{line: 242, col: 36, offset: 6670},
										exprs: []any{
											&oneOrMoreExpr{
												pos: position{line: 242, col: 36, offset: 6670},
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 36, offset: 6670},
													name: "ws",
												},
											},
											&labeledExpr{
												pos:   position{line: 242, col: 40, offset: 6674},
												label: "_i",
												expr: &ruleRefExpr{
													pos:  position{line: 242, col: 44, offset: 6678},
													name: "identifier",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "argument_decl",
			pos:  position{line: 247, col: 1, offset: 6796},
			expr: &actionExpr{
				pos: position{line: 247, col: 17, offset: 6812},
				run: (*parser).callonargument_decl1,
				expr: &seqExpr{
					pos: position{line: 247, col: 17, offset: 6812},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 247, col: 17, offset: 6812},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 21, offset: 6816},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 21, offset: 6816},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 247, col: 25, offset: 6820},
							label: "_i",
							expr: &zeroOrOneExpr{
								pos: position{line: 247, col: 28, offset: 6823},
								expr: &ruleRefExpr{
									pos:  position{line: 247, col: 28, offset: 6823},
									name: "identifier_list",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 45, offset: 6840},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 45, offset: 6840},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 49, offset: 6844},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "super_piped_expression",
			pos:  position{line: 255, col: 1, offset: 6933},
			expr: &actionExpr{
				pos: position{line: 256, col: 5, offset: 6961},
				run: (*parser).callonsuper_piped_expression1,
				expr: &seqExpr{
					pos: position{line: 256, col: 5, offset: 6961},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 256, col: 5, offset: 6961},
							label: "_s",
							expr: &oneOrMoreExpr{
								pos: position{line: 256, col: 8, offset: 6964},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 8, offset: 6964},
									name: "piped",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 15, offset: 6971},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 256, col: 18, offset: 6974},
								expr: &actionExpr{
									pos: position{line: 256, col: 19, offset: 6975},
									run: (*parser).callonsuper_piped_expression8,
									expr: &seqExpr{
										pos: position{line: 256, col: 19, offset: 6975},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 256, col: 19, offset: 6975},
												label: "_w",
												expr: &oneOrMoreExpr{
													pos: position{line: 256, col: 22, offset: 6978},
													expr: &ruleRefExpr{
														pos:  position{line: 256, col: 22, offset: 6978},
														name: "ws",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 256, col: 26, offset: 6982},
												label: "_l",
												expr: &oneOrMoreExpr{
													pos: position{line: 256, col: 29, offset: 6985},
													expr: &ruleRefExpr{
														pos:  position{line: 256, col: 29, offset: 6985},
														name: "piped",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "super_expression",
			pos:  position{line: 264, col: 1, offset: 7219},
			expr: &actionExpr{
				pos: position{line: 265, col: 5, offset: 7241},
				run: (*parser).callonsuper_expression1,
				expr: &seqExpr{
					pos: position{line: 265, col: 5, offset: 7241},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 7241},
							label: "_s",
							expr: &oneOrMoreExpr{
								pos: position{line: 265, col: 8, offset: 7244},
								expr: &ruleRefExpr{
									pos:  position{line: 265, col: 8, offset: 7244},
									name: "expression",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 20, offset: 7256},
							label: "_r",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 23, offset: 7259},
								expr: &actionExpr{
									pos: position{line: 265, col: 24, offset: 7260},
									run: (*parser).callonsuper_expression8,
									expr: &seqExpr{
										pos: position{line: 265, col: 24, offset: 7260},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 265, col: 24, offset: 7260},
												label: "_w",
												expr: &oneOrMoreExpr{
													pos: position{line: 265, col: 27, offset: 7263},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 27, offset: 7263},
														name: "ws",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 265, col: 31, offset: 7267},
												label: "_l",
												expr: &oneOrMoreExpr{
													pos: position{line: 265, col: 34, offset: 7270},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 34, offset: 7270},
														name: "expression",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "body",
			pos:  position{line: 273, col: 1, offset: 7509},
			expr: &choiceExpr{
				pos: position{line: 273, col: 8, offset: 7516},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 273, col: 8, offset: 7516},
						name: "lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 17, offset: 7525},
						name: "super_expression",
					},
					&ruleRefExpr{
						pos:  position{line: 273, col: 36, offset: 7544},
						name: "block",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lambda",
			pos:  position{line: 275, col: 1, offset: 7553},
			expr: &actionExpr{
				pos: position{line: 275, col: 10, offset: 7562},
				run: (*parser).callonlambda1,
				expr: &seqExpr{
					pos: position{line: 275, col: 10, offset: 7562},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 275, col: 10, offset: 7562},
							label: "_a",
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 13, offset: 7565},
								name: "argument_decl",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 27, offset: 7579},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 27, offset: 7579},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 276, col: 3, offset: 7586},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 276, col: 6, offset: 7589},
								name: "body",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "assign",
			pos:  position{line: 283, col: 1, offset: 7704},
			expr: &actionExpr{
				pos: position{line: 283, col: 10, offset: 7713},
				run: (*parser).callonassign1,
				expr: &seqExpr{
					pos: position{line: 283, col: 10, offset: 7713},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 283, col: 10, offset: 7713},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 13, offset: 7716},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 19, offset: 7722},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 19, offset: 7722},
								name: "ws",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 23, offset: 7726},
							name: "eq",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 26, offset: 7729},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 26, offset: 7729},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 30, offset: 7733},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 33, offset: 7736},
								name: "super_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "assign_add",
			pos:  position{line: 290, col: 1, offset: 7845},
			expr: &actionExpr{
				pos: position{line: 290, col: 14, offset: 7858},
				run: (*parser).callonassign_add1,
				expr: &seqExpr{
					pos: position{line: 290, col: 14, offset: 7858},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 290, col: 14, offset: 7858},
							label: "_i",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 17, offset: 7861},
								name: "store",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 23, offset: 7867},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 23, offset: 7867},
								name: "ws",
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 27, offset: 7871},
							val:        "+=",
							ignoreCase: false,
							want:       "\"+=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 32, offset: 7876},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 32, offset: 7876},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 36, offset: 7880},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 39, offset: 7883},
								name: "super_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "writeln",
			pos:  position{line: 297, col: 1, offset: 8055},
			expr: &actionExpr{
				pos: position{line: 297, col: 11, offset: 8065},
				run: (*parser).callonwriteln1,
				expr: &seqExpr{
					pos: position{line: 297, col: 11, offset: 8065},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 297, col: 11, offset: 8065},
							name: "quot",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 16, offset: 8070},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 16, offset: 8070},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 20, offset: 8074},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 23, offset: 8077},
								name: "super_piped_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "write",
			pos:  position{line: 300, col: 1, offset: 8164},
			expr: &actionExpr{
				pos: position{line: 300, col: 9, offset: 8172},
				run: (*parser).callonwrite1,
				expr: &seqExpr{
					pos: position{line: 300, col: 9, offset: 8172},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 300, col: 9, offset: 8172},
							name: "tilda",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 15, offset: 8178},
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 15, offset: 8178},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 19, offset: 8182},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 300, col: 22, offset: 8185},
								name: "super_piped_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "writeErrLn",
			pos:  position{line: 303, col: 1, offset: 8270},
			expr: &actionExpr{
				pos: position{line: 303, col: 14, offset: 8283},
				run: (*parser).callonwriteErrLn1,
				expr: &seqExpr{
					pos: position{line: 303, col: 14, offset: 8283},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 303, col: 14, offset: 8283},
							name: "quot",
						},
						&litMatcher{
							pos:        position{line: 303, col: 19, offset: 8288},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 23, offset: 8292},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 23, offset: 8292},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 27, offset: 8296},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 30, offset: 8299},
								name: "super_piped_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "writeErr",
			pos:  position{line: 306, col: 1, offset: 8399},
			expr: &actionExpr{
				pos: position{line: 306, col: 12, offset: 8410},
				run: (*parser).callonwriteErr1,
				expr: &seqExpr{
					pos: position{line: 306, col: 12, offset: 8410},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 306, col: 12, offset: 8410},
							name: "tilda",
						},
						&litMatcher{
							pos:        position{line: 306, col: 18, offset: 8416},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 22, offset: 8420},
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 22, offset: 8420},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 26, offset: 8424},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 29, offset: 8427},
								name: "super_piped_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "invoke",
			pos:  position{line: 309, col: 1, offset: 8525},
			expr: &actionExpr{
				pos: position{line: 309, col: 10, offset: 8534},
				run: (*parser).calloninvoke1,
				expr: &seqExpr{
					pos: position{line: 309, col: 10, offset: 8534},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 309, col: 10, offset: 8534},
							name: "amper",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 16, offset: 8540},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 16, offset: 8540},
								name: "ws",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 20, offset: 8544},
							label: "_e",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 23, offset: 8547},
								name: "super_piped_expression",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "identifier",
			pos:  position{line: 312, col: 1, offset: 8630},
			expr: &actionExpr{
				pos: position{line: 312, col: 14, offset: 8643},
				run: (*parser).callonidentifier1,
				expr: &seqExpr{
					pos: position{line: 312, col: 14, offset: 8643},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 312, col: 15, offset: 8644},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 312, col: 15, offset: 8644},
									name: "unds",
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 22, offset: 8651},
									name: "let",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 312, col: 27, offset: 8656},
							expr: &choiceExpr{
								pos: position{line: 312, col: 28, offset: 8657},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 312, col: 28, offset: 8657},
										name: "dig",
									},
									&ruleRefExpr{
										pos:  position{line: 312, col: 34, offset: 8663},
										name: "unds",
									},
									&ruleRefExpr{
										pos:  position{line: 312, col: 41, offset: 8670},
										name: "let",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "literal",
			pos:  position{line: 315, col: 1, offset: 8713},
			expr: &choiceExpr{
				pos: position{line: 316, col: 5, offset: 8726},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 316, col: 5, offset: 8726},
						run: (*parser).callonliteral2,
						expr: &labeledExpr{
							pos:   position{line: 316, col: 5, offset: 8726},
							label: "a",
							expr: &oneOrMoreExpr{
								pos: position{line: 316, col: 7, offset: 8728},
								expr: &ruleRefExpr{
									pos:  position{line: 316, col: 7, offset: 8728},
									name: "lit",
								},
							},
						},
					},
					&labeledExpr{
						pos:   position{line: 317, col: 5, offset: 8778},
						label: "s",
						expr: &ruleRefExpr{
							pos:  position{line: 317, col: 7, offset: 8780},
							name: "quotedString",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "escaped",
			pos:  position{line: 319, col: 1, offset: 8796},
			expr: &actionExpr{
				pos: position{line: 320, col: 5, offset: 8809},
				run: (*parser).callonescaped1,
				expr: &seqExpr{
					pos: position{line: 320, col: 5, offset: 8809},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 8809},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 10, offset: 8814},
							label: "_a",
							expr: &charClassMatcher{
								pos:        position{line: 320, col: 13, offset: 8817},
								val:        "[@!={}()#=&|$<>~'\"?%:`+ \\][.]",
								chars:      []rune{'@', '!', '=', '{', '}', '(', ')', '#', '=', '&', '|', '$', '<', '>', '~', '\'', '"', '?', '%', ':', '`', '+', ' ', ']', '[', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lit",
			pos:  position{line: 322, col: 1, offset: 8886},
			expr: &choiceExpr{
				pos: position{line: 323, col: 5, offset: 8895},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 323, col: 5, offset: 8895},
						name: "escaped",
					},
					&actionExpr{
						pos: position{line: 324, col: 5, offset: 8908},
						run: (*parser).callonlit3,
						expr: &oneOrMoreExpr{
							pos: position{line: 324, col: 5, offset: 8908},
							expr: &choiceExpr{
								pos: position{line: 324, col: 6, offset: 8909},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 324, col: 6, offset: 8909},
										name: "sym",
									},
									&ruleRefExpr{
										pos:  position{line: 324, col: 12, offset: 8915},
										name: "let",
									},
									&ruleRefExpr{
										pos:  position{line: 324, col: 18, offset: 8921},
										name: "dig",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 325, col: 5, offset: 8962},
						run: (*parser).callonlit9,
						expr: &litMatcher{
							pos:        position{line: 325, col: 5, offset: 8962},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dig",
			pos:  position{line: 327, col: 1, offset: 8991},
			expr: &charClassMatcher{
				pos:        position{line: 327, col: 7, offset: 8997},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "let",
			pos:  position{line: 328, col: 1, offset: 9004},
			expr: &charClassMatcher{
				pos:        position{line: 328, col: 7, offset: 9010},
				val:        "[a-zA-Z]",
				ranges:     []rune{'a', 'z', 'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sym",
			pos:  position{line: 329, col: 1, offset: 9020},
			expr: &charClassMatcher{
				pos:        position{line: 329, col: 7, offset: 9026},
				val:        "[^\\\\@!={}()#=&|$<>~'\"?%:`+ \\n\\r\\t\\][.]",
				chars:      []rune{'\\', '@', '!', '=', '{', '}', '(', ')', '#', '=', '&', '|', '$', '<', '>', '~', '\'', '"', '?', '%', ':', '`', '+', ' ', '\n', '\r', '\t', ']', '[', '.'},
				ignoreCase: false,
				inverted:   true,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ws",
			pos:  position{line: 331, col: 1, offset: 9068},
			expr: &choiceExpr{
				pos: position{line: 331, col: 6, offset: 9073},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 331, col: 6, offset: 9073},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&litMatcher{
						pos:        position{line: 331, col: 12, offset: 9079},
						val:        "\t",
						ignoreCase: false,
						want:       "\"\\t\"",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dash",
			pos:  position{line: 332, col: 1, offset: 9085},
			expr: &litMatcher{
				pos:        position{line: 332, col: 8, offset: 9092},
				val:        "-",
				ignoreCase: false,
				want:       "\"-\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "unds",
			pos:  position{line: 333, col: 1, offset: 9097},
			expr: &litMatcher{
				pos:        position{line: 333, col: 8, offset: 9104},
				val:        "_",
				ignoreCase: false,
				want:       "\"_\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "quot",
			pos:  position{line: 334, col: 1, offset: 9109},
			expr: &litMatcher{
				pos:        position{line: 334, col: 8, offset: 9116},
				val:        "`",
				ignoreCase: false,
				want:       "\"`\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "dblsign",
			pos:  position{line: 335, col: 1, offset: 9121},
			expr: &seqExpr{
				pos: position{line: 335, col: 11, offset: 9131},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 335, col: 11, offset: 9131},
						name: "sign",
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 16, offset: 9136},
						name: "sign",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "sign",
			pos:  position{line: 336, col: 1, offset: 9142},
			expr: &litMatcher{
				pos:        position{line: 336, col: 8, offset: 9149},
				val:        "$",
				ignoreCase: false,
				want:       "\"$\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "gt",
			pos:  position{line: 337, col: 1, offset: 9154},
			expr: &litMatcher{
				pos:        position{line: 337, col: 6, offset: 9159},
				val:        ">",
				ignoreCase: false,
				want:       "\">\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "lt",
			pos:  position{line: 338, col: 1, offset: 9164},
			expr: &litMatcher{
				pos:        position{line: 338, col: 6, offset: 9169},
				val:        "<",
				ignoreCase: false,
				want:       "\"<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eq",
			pos:  position{line: 339, col: 1, offset: 9174},
			expr: &litMatcher{
				pos:        position{line: 339, col: 6, offset: 9179},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "amper",
			pos:  position{line: 340, col: 1, offset: 9184},
			expr: &litMatcher{
				pos:        position{line: 340, col: 9, offset: 9192},
				val:        "&",
				ignoreCase: false,
				want:       "\"&\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "tilda",
			pos:  position{line: 341, col: 1, offset: 9197},
			expr: &litMatcher{
				pos:        position{line: 341, col: 9, offset: 9205},
				val:        "~",
				ignoreCase: false,
				want:       "\"~\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "colon",
			pos:  position{line: 342, col: 1, offset: 9210},
			expr: &litMatcher{
				pos:        position{line: 342, col: 9, offset: 9218},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "any",
			pos:  position{line: 343, col: 1, offset: 9223},
			expr: &actionExpr{
				pos: position{line: 343, col: 7, offset: 9229},
				run: (*parser).callonany1,
				expr: &anyMatcher{
					line: 343, col: 7, offset: 9229,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "eof",
			pos:  position{line: 344, col: 1, offset: 9263},
			expr: &notExpr{
				pos: position{line: 344, col: 7, offset: 9269},
				expr: &anyMatcher{
					line: 344, col: 8, offset: 9270,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onfile1(_s any) (any, error) {

	return arrayify[Expression](_s), nil

}

func (p *parser) callonfile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfile1(stack["_s"])
}

func (c *current) onempty_line1() (any, error) {
	return MakeLiteral(""), nil
}

func (p *parser) callonempty_line1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onempty_line1()
}

func (c *current) oncode_line1(_c any) (any, error) {
	return _c, nil
}

func (p *parser) calloncode_line1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncode_line1(stack["_c"])
}

func (c *current) oncomment1() (any, error) {
	return string(c.text), nil
}

func (p *parser) calloncomment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncomment1()
}

func (c *current) ondirective1(directive any) (any, error) {
	return directive, nil
}

func (p *parser) callondirective1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondirective1(stack["directive"])
}

func (c *current) oninclude1(fn any) (any, error) {
	return Include{FileName: fn.(Expression)}, nil
}

func (p *parser) calloninclude1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninclude1(stack["fn"])
}

func (c *current) onsingleQuotedString1() (any, error) {
	return MakeParsedString("'", string(c.text[1:len(c.text)-1])), nil
}

func (p *parser) callonsingleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsingleQuotedString1()
}

func (c *current) ondoubleQuotedString1() (any, error) {
	return MakeParsedString("\"", string(c.text[1:len(c.text)-1])), nil
}

func (p *parser) callondoubleQuotedString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ondoubleQuotedString1()
}

func (c *current) onexpression_list7(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonexpression_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list7(stack["_e"])
}

func (c *current) onexpression_list1(_e, _r any) (any, error) {

	return ExpressionList(listFrom[Expression](_e, _r)), nil
}

func (p *parser) callonexpression_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression_list1(stack["_e"], stack["_r"])
}

func (c *current) onnamed_expression5(_i any) (any, error) {
	return _i, nil
}

func (p *parser) callonnamed_expression5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnamed_expression5(stack["_i"])
}

func (c *current) onnamed_expression1(_i, _e any) (any, error) {

	var k string
	if _i == nil {
		k = ""
	} else {
		k = _i.(string)
	}

	return NamedExpression{Key: k, Value: _e.(Expression)}, nil
}

func (p *parser) callonnamed_expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnamed_expression1(stack["_i"], stack["_e"])
}

func (c *current) onnamed_expression_list7(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonnamed_expression_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnamed_expression_list7(stack["_e"])
}

func (c *current) onnamed_expression_list1(_e, _r any) (any, error) {

	return NamedExpressionList(listFrom[NamedExpression](_e, _r)), nil
}

func (p *parser) callonnamed_expression_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnamed_expression_list1(stack["_e"], stack["_r"])
}

func (c *current) oncall1(_i, _m any) (any, error) {

	var t NamedExpressionList

	if _m != nil {
		t = _m.(NamedExpressionList)
	} else {
		t = NamedExpressionList{}
	}

	return Call{
		Reference: _i.(Reference),
		Arguments: t}, nil
}

func (p *parser) calloncall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncall1(stack["_i"], stack["_m"])
}

func (c *current) onindex2(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonindex2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindex2(stack["_e"])
}

func (c *current) onindex8(_s any) (any, error) {
	return _s, nil
}

func (p *parser) callonindex8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onindex8(stack["_s"])
}

func (c *current) onmember1(_m any) (any, error) {

	return Member{
		Identifier: castify[string](_m)}, nil
}

func (p *parser) callonmember1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onmember1(stack["_m"])
}

func (c *current) onreference1(_a any) (any, error) {
	return Reference{Expression: _a.(Expression)}, nil
}

func (p *parser) callonreference1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference1(stack["_a"])
}

func (c *current) onreference_paren1(_m any) (any, error) {
	return Reference{Expression: _m.(Expression)}, nil
}

func (p *parser) callonreference_paren1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference_paren1(stack["_m"])
}

func (c *current) onreference_block1(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonreference_block1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onreference_block1(stack["_e"])
}

func (c *current) onstring_content6(_b any) (any, error) {
	return MakeLiteral(_b.(string)), nil
}

func (p *parser) callonstring_content6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content6(stack["_b"])
}

func (c *current) onstring_content9() (any, error) {
	return MakeLiteral("\b"), nil
}

func (p *parser) callonstring_content9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content9()
}

func (c *current) onstring_content11() (any, error) {
	return MakeLiteral("\f"), nil
}

func (p *parser) callonstring_content11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content11()
}

func (c *current) onstring_content13() (any, error) {
	return MakeLiteral("\n"), nil
}

func (p *parser) callonstring_content13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content13()
}

func (c *current) onstring_content15() (any, error) {
	return MakeLiteral("\r"), nil
}

func (p *parser) callonstring_content15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content15()
}

func (c *current) onstring_content17() (any, error) {
	return MakeLiteral("\t"), nil
}

func (p *parser) callonstring_content17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content17()
}

func (c *current) onstring_content23() (any, error) {
	return MakeLiteral(string(c.text)), nil
}

func (p *parser) callonstring_content23() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content23()
}

func (c *current) onstring_content25(_a any) (any, error) {
	return MakeLiteral(string(c.text)), nil
}

func (p *parser) callonstring_content25() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content25(stack["_a"])
}

func (c *current) onstring_content1(_q any) (any, error) {

	return Expressions(arrayify[Expression](_q)), nil
}

func (p *parser) callonstring_content1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstring_content1(stack["_q"])
}

func (c *current) ontemplate16(_s any) (any, error) {
	return _s, nil
}

func (p *parser) callontemplate16() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate16(stack["_s"])
}

func (c *current) ontemplate1(_i, _a, _s any) (any, error) {

	b := strings.Join(arrayify[string](_s), "")
	s := StoreAccess{Reference: MakeLiteral(_i.(string))}
	i := castify[IdentifierList](_a)

	return MakeTemplate(s, i, b), nil
}

func (p *parser) callontemplate1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.ontemplate1(stack["_i"], stack["_a"], stack["_s"])
}

func (c *current) onparse_data1(_f, _d any) (any, error) {

	return ParseData{
		Format: _f.(Expression),
		Data:   _d.(Expression)}, nil

}

func (p *parser) callonparse_data1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onparse_data1(stack["_f"], stack["_d"])
}

func (c *current) onformat_data1(_f, _d any) (any, error) {

	return FormatData{
		Format: _f.(Expression),
		Data:   _d.(Expression)}, nil

}

func (p *parser) callonformat_data1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onformat_data1(stack["_f"], stack["_d"])
}

func (c *current) onstore2(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore2(stack["_e"], stack["_i"])
}

func (c *current) onstore8(_e, _i any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression),
		Index:     _i.(Expression)}, nil
}

func (p *parser) callonstore8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore8(stack["_e"], stack["_i"])
}

func (c *current) onstore15(_e any) (any, error) {

	return StoreAccess{
		Reference: MakeLiteral(_e.(string))}, nil
}

func (p *parser) callonstore15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore15(stack["_e"])
}

func (c *current) onstore18(_e any) (any, error) {

	return StoreAccess{
		Reference: _e.(Expression)}, nil
}

func (p *parser) callonstore18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore18(stack["_e"])
}

func (c *current) onstore21(_e, _i any) (any, error) {

	var idx Expression
	if _i != nil {
		idx = _i.(Expression)
	}
	return StoreAccess{
		Reference: _e.(Expression),
		Index:     idx}, nil
}

func (p *parser) callonstore21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstore21(stack["_e"], stack["_i"])
}

func (c *current) oncondition15(_f any) (any, error) {
	return _f, nil
}

func (p *parser) calloncondition15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition15(stack["_f"])
}

func (c *current) oncondition2(_c, _t, _f any) (any, error) {

	return MakeCondition(_c.(Expression), _t.(Expression), castify[Expression](_f)), nil

}

func (p *parser) calloncondition2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition2(stack["_c"], stack["_t"], stack["_f"])
}

func (c *current) oncondition37(_f any) (any, error) {
	return _f, nil
}

func (p *parser) calloncondition37() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition37(stack["_f"])
}

func (c *current) oncondition24(_c, _t, _f any) (any, error) {

	return MakeCondition(_c.(Expression), _t.(Expression), castify[Expression](_f)), nil

}

func (p *parser) calloncondition24() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oncondition24(stack["_c"], stack["_t"], stack["_f"])
}

func (c *current) oneach1(_e, _b any) (any, error) {
	return MakeEach(_e.(Expression), _b.(Expression)), nil
}

func (p *parser) calloneach1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oneach1(stack["_e"], stack["_b"])
}

func (c *current) onlist1(_e any) (any, error) {

	if _e == nil {
		return Constant{Value: common.List{}}, nil
	}

	return _e, nil
}

func (p *parser) callonlist1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlist1(stack["_e"])
}

func (c *current) onobject2(_n any) (any, error) {

	if _n == nil {
		return MakeExpressionStore(NamedExpressionList{})
	}
	return MakeExpressionStore(_n.(NamedExpressionList))

}

func (p *parser) callonobject2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onobject2(stack["_n"])
}

func (c *current) onobject13(_e any) (any, error) {
	return _e, nil
}

func (p *parser) callonobject13() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onobject13(stack["_e"])
}

func (c *current) onnot1(e any) (any, error) {
	return MakeNot(e.(Expression)), nil
}

func (p *parser) callonnot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnot1(stack["e"])
}

func (c *current) onequal1(_l, _r any) (any, error) {
	return MakeEqual(_l.(Expression), _r.(Expression)), nil
}

func (p *parser) callonequal1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onequal1(stack["_l"], stack["_r"])
}

func (c *current) onnot_equal1(_l, _r any) (any, error) {
	return MakeNot(MakeEqual(_l.(Expression), _r.(Expression))), nil
}

func (p *parser) callonnot_equal1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onnot_equal1(stack["_l"], stack["_r"])
}

func (c *current) onadd1(_l, _r any) (any, error) {
	return MakeAdd(_l.(Expression), _r.(Expression)), nil
}

func (p *parser) callonadd1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onadd1(stack["_l"], stack["_r"])
}

func (c *current) onexpression12(_l, _r, _e any) (any, error) {
	return MakePiped[Pipe](_l.(Expression), _r.(Expression), castify[Expression](_e)), nil
}

func (p *parser) callonexpression12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression12(stack["_l"], stack["_r"], stack["_e"])
}

func (c *current) onexpression28(_l, _r, _e any) (any, error) {
	return MakePiped[PipeAppend](_l.(Expression), _r.(Expression), castify[Expression](_e)), nil
}

func (p *parser) callonexpression28() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression28(stack["_l"], stack["_r"], stack["_e"])
}

func (c *current) onexpression44(_l, _r, _e any) (any, error) {
	return MakePiped[PipeOut](_l.(Expression), _r.(Expression), castify[Expression](_e)), nil
}

func (p *parser) callonexpression44() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression44(stack["_l"], stack["_r"], stack["_e"])
}

func (c *current) onexpression60(_l, _r any) (any, error) {
	return MakePiped[PipeIn](_r.(Expression), _l.(Expression), nil), nil
}

func (p *parser) callonexpression60() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onexpression60(stack["_l"], stack["_r"])
}

func (c *current) onblock1(_l any) (any, error) {

	return Block(arrayify[Expression](_l)), nil
}

func (p *parser) callonblock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onblock1(stack["_l"])
}

func (c *current) onidentifier_list7(_i any) (any, error) {
	return _i, nil
}

func (p *parser) callonidentifier_list7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list7(stack["_i"])
}

func (c *current) onidentifier_list1(_i, _r any) (any, error) {

	return IdentifierList{
		Identifiers: listFrom[string](_i, _r)}, nil
}

func (p *parser) callonidentifier_list1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier_list1(stack["_i"], stack["_r"])
}

func (c *current) onargument_decl1(_i any) (any, error) {

	if _i == nil {
		return IdentifierList{}, nil
	}

	return _i, nil
}

func (p *parser) callonargument_decl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onargument_decl1(stack["_i"])
}

func (c *current) onsuper_piped_expression8(_w, _l any) (any, error) {

	return Expressions{
		MakeLiteral(" "),
		Expressions(arrayify[Expression](_l))}, nil
}

func (p *parser) callonsuper_piped_expression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_piped_expression8(stack["_w"], stack["_l"])
}

func (c *current) onsuper_piped_expression1(_s, _r any) (any, error) {

	return Expressions(listFrom[Expression](Expressions(arrayify[Expression](_s)), _r)), nil

}

func (p *parser) callonsuper_piped_expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_piped_expression1(stack["_s"], stack["_r"])
}

func (c *current) onsuper_expression8(_w, _l any) (any, error) {

	return Expressions{
		MakeLiteral(" "),
		Expressions(arrayify[Expression](_l))}, nil
}

func (p *parser) callonsuper_expression8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_expression8(stack["_w"], stack["_l"])
}

func (c *current) onsuper_expression1(_s, _r any) (any, error) {

	return Expressions(listFrom[Expression](Expressions(arrayify[Expression](_s)), _r)), nil

}

func (p *parser) callonsuper_expression1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuper_expression1(stack["_s"], stack["_r"])
}

func (c *current) onlambda1(_a, _e any) (any, error) {

	return Lambda{
		Arguments: _a.(IdentifierList),
		Body:      _e.(Expression)}, nil

}

func (p *parser) callonlambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlambda1(stack["_a"], stack["_e"])
}

func (c *current) onassign1(_i, _e any) (any, error) {

	return Assign{
		Store: _i.(StoreAccess),
		Value: _e.(Expression)}, nil
}

func (p *parser) callonassign1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onassign1(stack["_i"], stack["_e"])
}

func (c *current) onassign_add1(_i, _e any) (any, error) {

	return Assign{
		Store: _i.(StoreAccess),
		Value: MakeAdd(Reference{Expression: _i.(StoreAccess)}, MakeUnwrap(_e.(Expression)))}, nil
}

func (p *parser) callonassign_add1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onassign_add1(stack["_i"], stack["_e"])
}

func (c *current) onwriteln1(_e any) (any, error) {

	return WriteLn{Expression: _e.(Expressions)}, nil
}

func (p *parser) callonwriteln1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwriteln1(stack["_e"])
}

func (c *current) onwrite1(_e any) (any, error) {

	return Write{Expression: _e.(Expressions)}, nil
}

func (p *parser) callonwrite1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwrite1(stack["_e"])
}

func (c *current) onwriteErrLn1(_e any) (any, error) {

	return WriteLn{Expression: _e.(Expressions), Error: true}, nil
}

func (p *parser) callonwriteErrLn1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwriteErrLn1(stack["_e"])
}

func (c *current) onwriteErr1(_e any) (any, error) {

	return Write{Expression: _e.(Expressions), Error: true}, nil
}

func (p *parser) callonwriteErr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onwriteErr1(stack["_e"])
}

func (c *current) oninvoke1(_e any) (any, error) {

	return Invoke{Expressions: _e.(Expressions)}, nil
}

func (p *parser) calloninvoke1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.oninvoke1(stack["_e"])
}

func (c *current) onidentifier1() (any, error) {

	return string(c.text), nil
}

func (p *parser) callonidentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onidentifier1()
}

func (c *current) onliteral2(a any) (any, error) {
	return MakeLiteral(convert(a)), nil
}

func (p *parser) callonliteral2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onliteral2(stack["a"])
}

func (c *current) onescaped1(_a any) (any, error) {
	return string(_a.([]byte)), nil
}

func (p *parser) callonescaped1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onescaped1(stack["_a"])
}

func (c *current) onlit3() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonlit3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlit3()
}

func (c *current) onlit9() (any, error) {
	return "\\", nil
}

func (p *parser) callonlit9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onlit9()
}

func (c *current) onany1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonany1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onany1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
